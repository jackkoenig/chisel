"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[7343],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),h=a,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||r;return t?i.createElement(m,o(o({ref:n},u),{},{components:t})):i.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},1771:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=t(7462),a=(t(7294),t(3905));const r={layout:"docs",title:"Unconnected Wires",section:"chisel3"},o="Unconnected Wires",l={unversionedId:"explanations/unconnected-wires",id:"explanations/unconnected-wires",title:"Unconnected Wires",description:"The Invalidate API (#645) adds support to Chisel",source:"@site/docs/explanations/unconnected-wires.md",sourceDirName:"explanations",slug:"/explanations/unconnected-wires",permalink:"/chisel/docs/explanations/unconnected-wires",draft:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/explanations/unconnected-wires.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Unconnected Wires",section:"chisel3"},sidebar:"tutorialSidebar",previous:{title:"Supported Hardware",permalink:"/chisel/docs/explanations/supported-hardware"},next:{title:"Warnings",permalink:"/chisel/docs/explanations/warnings"}},s={},c=[{value:"API",id:"api",level:3},{value:"Determining the unconnected element",id:"determining-the-unconnected-element",level:3}],u={toc:c},d="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"unconnected-wires"},"Unconnected Wires"),(0,a.kt)("p",null,"The Invalidate API ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/freechipsproject/chisel3/pull/645"},"(#645)")," adds support to Chisel\nfor reporting unconnected wires as errors."),(0,a.kt)("p",null,"Prior to this pull request, Chisel automatically generated a firrtl ",(0,a.kt)("inlineCode",{parentName:"p"},"is invalid")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"Module IO()"),", and each ",(0,a.kt)("inlineCode",{parentName:"p"},"Wire()")," definition.\nThis made it difficult to detect cases where output signals were never driven.\nChisel now supports a ",(0,a.kt)("inlineCode",{parentName:"p"},"DontCare")," element, which may be connected to an output signal, indicating that that signal is intentionally not driven.\nUnless a signal is driven by hardware or connected to a ",(0,a.kt)("inlineCode",{parentName:"p"},"DontCare"),', Firrtl will complain with a "not fully initialized" error.'),(0,a.kt)("h3",{id:"api"},"API"),(0,a.kt)("p",null,"Output signals may be connected to DontCare, generating a ",(0,a.kt)("inlineCode",{parentName:"p"},"is invalid")," when the corresponding firrtl is emitted."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"\nclass Out extends Bundle { \n  val debug = Bool()\n  val debugOption = Bool()\n}\nval io = new Bundle { val out = new Out }\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"io.out.debug := true.B\nio.out.debugOption := DontCare\n")),(0,a.kt)("p",null,"This indicates that the signal ",(0,a.kt)("inlineCode",{parentName:"p"},"io.out.debugOption"),' is intentionally not driven and firrtl should not issue a "not fully initialized"\nerror for this signal.'),(0,a.kt)("p",null,"This can be applied to aggregates as well as individual signals:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\nclass ModWithVec extends Module {\n  // ...\n  val nElements = 5\n  val io = IO(new Bundle {\n    val outs = Output(Vec(nElements, Bool()))\n  })\n  io.outs <> DontCare\n  // ...\n}\n\nclass TrivialInterface extends Bundle {\n  val in  = Input(Bool())\n  val out = Output(Bool())\n}\n\nclass ModWithTrivalInterface extends Module {\n  // ...\n  val io = IO(new TrivialInterface)\n  io <> DontCare\n  // ...\n}\n")),(0,a.kt)("h3",{id:"determining-the-unconnected-element"},"Determining the unconnected element"),(0,a.kt)("p",null,"I have an interface with 42 wires.\nWhich one of them is unconnected?"),(0,a.kt)("p",null,"The firrtl error message should contain something like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'firrtl.passes.CheckInitialization$RefNotInitializedException:  @[:@6.4] : [module Router]  Reference io is not fully initialized.\n   @[Decoupled.scala 38:19:@48.12] : node _GEN_23 = mux(and(UInt<1>("h1"), eq(UInt<2>("h3"), _T_84)), _GEN_2, VOID) @[Decoupled.scala 38:19:@48.12]\n   @[Router.scala 78:30:@44.10] : node _GEN_36 = mux(_GEN_0.ready, _GEN_23, VOID) @[Router.scala 78:30:@44.10]\n   @[Router.scala 75:26:@39.8] : node _GEN_54 = mux(io.in.valid, _GEN_36, VOID) @[Router.scala 75:26:@39.8]\n   @[Router.scala 70:50:@27.6] : node _GEN_76 = mux(io.load_routing_table_request.valid, VOID, _GEN_54) @[Router.scala 70:50:@27.6]\n   @[Router.scala 65:85:@19.4] : node _GEN_102 = mux(_T_62, VOID, _GEN_76) @[Router.scala 65:85:@19.4]\n   : io.outs[3].bits.body <= _GEN_102\n')),(0,a.kt)("p",null,"The first line is the initial error report.\nSuccessive lines, indented and beginning with source line information indicate connections involving the problematic signal.\nUnfortunately, if these are ",(0,a.kt)("inlineCode",{parentName:"p"},"when")," conditions involving muxes, they may be difficult to decipher.\nThe last line of the group, indented and beginning with a ",(0,a.kt)("inlineCode",{parentName:"p"},":")," should indicate the uninitialized signal component.\nThis example (from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ucb-bar/chisel-tutorial/blob/release/src/main/scala/examples/Router.scala"},"Router tutorial"),")\nwas produced when the output queue bits were not initialized.\nThe old code was:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"  io.outs.foreach { out => out.noenq() }\n")),(0,a.kt)("p",null,"which initialized the queue's ",(0,a.kt)("inlineCode",{parentName:"p"},"valid")," bit, but did not initialize the actual output values.\nThe fix was:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"  io.outs.foreach { out =>\n    out.bits := 0.U.asTypeOf(out.bits)\n    out.noenq()\n  }\n")))}p.isMDXComponent=!0}}]);
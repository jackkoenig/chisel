"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[7988],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=i.createContext({}),s=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(u.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,h=d["".concat(u,".").concat(m)]||d[m]||c[m]||a;return t?i.createElement(h,l(l({ref:n},p),{},{components:t})):i.createElement(h,l({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=m;var r={};for(var u in n)hasOwnProperty.call(n,u)&&(r[u]=n[u]);r.originalType=e,r[d]="string"==typeof e?e:o,l[1]=r;for(var s=2;s<a;s++)l[s]=t[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},994:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>s});var i=t(7462),o=(t(7294),t(3905));const a={layout:"docs",title:"Modules",section:"chisel3"},l="Modules",r={unversionedId:"explanations/modules",id:"explanations/modules",title:"Modules",description:"Chisel modules are very similar to Verilog modules in",source:"@site/docs/explanations/modules.md",sourceDirName:"explanations",slug:"/explanations/modules",permalink:"/chisel/docs/explanations/modules",draft:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/explanations/modules.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Modules",section:"chisel3"},sidebar:"tutorialSidebar",previous:{title:"Memories",permalink:"/chisel/docs/explanations/memories"},next:{title:"Motivation",permalink:"/chisel/docs/explanations/motivation"}},u={},s=[{value:"Module Hierarchy",id:"module-hierarchy",level:3},{value:"<code>RawModule</code>",id:"rawmodule",level:3}],p={toc:s},d="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"modules"},"Modules"),(0,o.kt)("p",null,"Chisel ",(0,o.kt)("em",{parentName:"p"},"modules")," are very similar to Verilog ",(0,o.kt)("em",{parentName:"p"},"modules")," in\ndefining a hierarchical structure in the generated circuit."),(0,o.kt)("p",null,"The hierarchical module namespace is accessible in downstream tools\nto aid in debugging and physical layout.  A user-defined module is\ndefined as a ",(0,o.kt)("em",{parentName:"p"},"class")," which:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"inherits from ",(0,o.kt)("inlineCode",{parentName:"li"},"Module"),","),(0,o.kt)("li",{parentName:"ul"},"contains at least one interface wrapped in a Module's ",(0,o.kt)("inlineCode",{parentName:"li"},"IO()")," method (traditionally stored in a port field named ",(0,o.kt)("inlineCode",{parentName:"li"},"io"),"), and"),(0,o.kt)("li",{parentName:"ul"},"wires together subcircuits in its constructor.")),(0,o.kt)("p",null,"As an example, consider defining your own two-input multiplexer as a\nmodule:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\nclass Mux2IO extends Bundle {\n  val sel = Input(UInt(1.W))\n  val in0 = Input(UInt(1.W))\n  val in1 = Input(UInt(1.W))\n  val out = Output(UInt(1.W))\n}\n\nclass Mux2 extends Module {\n  val io = IO(new Mux2IO)\n  io.out := (io.sel & io.in1) | (~io.sel & io.in0)\n}\n")),(0,o.kt)("p",null,"The wiring interface to a module is a collection of ports in the\nform of a ",(0,o.kt)("inlineCode",{parentName:"p"},"Bundle"),".  The interface to the module is defined\nthrough a field named ",(0,o.kt)("inlineCode",{parentName:"p"},"io"),".  For ",(0,o.kt)("inlineCode",{parentName:"p"},"Mux2"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"io")," is\ndefined as a bundle with four fields, one for each multiplexer port."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},":=")," assignment operator, used here in the body of the\ndefinition, is a special operator in Chisel that wires the input of\nleft-hand side to the output of the right-hand side."),(0,o.kt)("h3",{id:"module-hierarchy"},"Module Hierarchy"),(0,o.kt)("p",null,"We can now construct circuit hierarchies, where we build larger modules out\nof smaller sub-modules.  For example, we can build a 4-input\nmultiplexer module in terms of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Mux2")," module by wiring\ntogether three 2-input multiplexers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class Mux4IO extends Bundle {\n  val in0 = Input(UInt(1.W))\n  val in1 = Input(UInt(1.W))\n  val in2 = Input(UInt(1.W))\n  val in3 = Input(UInt(1.W))\n  val sel = Input(UInt(2.W))\n  val out = Output(UInt(1.W))\n}\nclass Mux4 extends Module {\n  val io = IO(new Mux4IO)\n\n  val m0 = Module(new Mux2)\n  m0.io.sel := io.sel(0)\n  m0.io.in0 := io.in0\n  m0.io.in1 := io.in1\n\n  val m1 = Module(new Mux2)\n  m1.io.sel := io.sel(0)\n  m1.io.in0 := io.in2\n  m1.io.in1 := io.in3\n\n  val m3 = Module(new Mux2)\n  m3.io.sel := io.sel(1)\n  m3.io.in0 := m0.io.out\n  m3.io.in1 := m1.io.out\n\n  io.out := m3.io.out\n}\n")),(0,o.kt)("p",null,"We again define the module interface as ",(0,o.kt)("inlineCode",{parentName:"p"},"io")," and wire up the\ninputs and outputs.  In this case, we create three ",(0,o.kt)("inlineCode",{parentName:"p"},"Mux2"),"\nchildren modules, using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")," constructor function and\nthe Scala ",(0,o.kt)("inlineCode",{parentName:"p"},"new")," keyword to create a\nnew object.  We then wire them up to one another and to the ports of\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"Mux4")," interface."),(0,o.kt)("p",null,"Note: Chisel ",(0,o.kt)("inlineCode",{parentName:"p"},"Module"),"s have an implicit clock (called ",(0,o.kt)("inlineCode",{parentName:"p"},"clock"),") and\nan implicit reset (called ",(0,o.kt)("inlineCode",{parentName:"p"},"reset"),"). To create modules without implicit\nclock and reset, Chisel provides ",(0,o.kt)("inlineCode",{parentName:"p"},"RawModule"),"."),(0,o.kt)("h3",{id:"rawmodule"},(0,o.kt)("inlineCode",{parentName:"h3"},"RawModule")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"RawModule")," is a module that ",(0,o.kt)("strong",{parentName:"p"},"does not provide an implicit clock and reset."),"\nThis can be useful when interfacing a Chisel module with a design that expects\na specific naming convention for clock or reset."),(0,o.kt)("p",null,"Then we can use it in place of ",(0,o.kt)("em",{parentName:"p"},"Module")," usage :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3.{RawModule, withClockAndReset}\n\nclass Foo extends Module {\n  val io = IO(new Bundle{\n    val a = Input(Bool())\n    val b = Output(Bool())\n  })\n  io.b := !io.a\n}\n\nclass FooWrapper extends RawModule {\n  val a_i  = IO(Input(Bool()))\n  val b_o  = IO(Output(Bool()))\n  val clk  = IO(Input(Clock()))\n  val rstn = IO(Input(Bool()))\n\n  val foo = withClockAndReset(clk, !rstn){ Module(new Foo) }\n\n  foo.io.a := a_i\n  b_o := foo.io.b\n}\n")),(0,o.kt)("p",null,"In the example above, the ",(0,o.kt)("inlineCode",{parentName:"p"},"RawModule")," is used to change the reset polarity\nof module ",(0,o.kt)("inlineCode",{parentName:"p"},"SlaveSpi"),". Indeed, the reset is active high by default in Chisel\nmodules, then using ",(0,o.kt)("inlineCode",{parentName:"p"},"withClockAndReset(clock, !rstn)")," we can use an active low\nreset in the entire design."),(0,o.kt)("p",null,"The clock is just wired as is, but if needed, ",(0,o.kt)("inlineCode",{parentName:"p"},"RawModule")," can be used in\nconjunction with ",(0,o.kt)("inlineCode",{parentName:"p"},"BlackBox")," to connect a differential clock input for example."))}c.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[6562],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,l=function(e,n){if(null==e)return{};var t,o,l={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var r=o.createContext({}),s=function(e){var n=o.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(r.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},k=o.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,r=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=s(t),k=l,m=p["".concat(r,".").concat(k)]||p[k]||d[k]||i;return t?o.createElement(m,c(c({ref:n},u),{},{components:t})):o.createElement(m,c({ref:n},u))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,c=new Array(i);c[0]=k;var a={};for(var r in n)hasOwnProperty.call(n,r)&&(a[r]=n[r]);a.originalType=e,a[p]="string"==typeof e?e:l,c[1]=a;for(var s=2;s<i;s++)c[s]=t[s];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}k.displayName="MDXCreateElement"},3880:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var o=t(7462),l=(t(7294),t(3905));const i={layout:"docs",title:"Multiple Clock Domains",section:"chisel3"},c="Multiple Clock Domains",a={unversionedId:"explanations/multi-clock",id:"explanations/multi-clock",title:"Multiple Clock Domains",description:"Chisel 3 supports multiple clock domains as follows.",source:"@site/docs/explanations/multi-clock.md",sourceDirName:"explanations",slug:"/explanations/multi-clock",permalink:"/chisel/docs/explanations/multi-clock",draft:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/explanations/multi-clock.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Multiple Clock Domains",section:"chisel3"},sidebar:"tutorialSidebar",previous:{title:"Motivation",permalink:"/chisel/docs/explanations/motivation"},next:{title:"Muxes and Input Selection",permalink:"/chisel/docs/explanations/muxes-and-input-selection"}},r={},s=[],u={toc:s},p="wrapper";function d(e){let{components:n,...t}=e;return(0,l.kt)(p,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"multiple-clock-domains"},"Multiple Clock Domains"),(0,l.kt)("p",null,"Chisel 3 supports multiple clock domains as follows."),(0,l.kt)("p",null,"Note that in order to cross clock domains safely, you will need appropriate synchronization logic (such as an asynchronous FIFO). You can use the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ucb-bar/asyncqueue"},"AsyncQueue library")," to do this easily."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\n\nclass MultiClockModule extends Module {\n  val io = IO(new Bundle {\n    val clockB = Input(Clock())\n    val resetB = Input(Bool())\n    val stuff = Input(Bool())\n  })\n\n  // This register is clocked against the module clock.\n  val regClock = RegNext(io.stuff)\n\n  withClockAndReset (io.clockB, io.resetB) {\n    // In this withClock scope, all synchronous elements are clocked against io.clockB.\n    // Reset for flops in this domain is using the explicitly provided reset io.resetB.\n\n    // This register is clocked against io.clockB.\n    val regClockB = RegNext(io.stuff)\n  }\n\n  // This register is also clocked against the module clock.\n  val regClock2 = RegNext(io.stuff)\n}\n")),(0,l.kt)("p",null,"You can also instantiate modules in another clock domain:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\n\nclass ChildModule extends Module {\n  val io = IO(new Bundle{\n    val in = Input(Bool())\n  })\n}\nclass MultiClockModule extends Module {\n  val io = IO(new Bundle {\n    val clockB = Input(Clock())\n    val resetB = Input(Bool())\n    val stuff = Input(Bool())\n  })\n  val clockB_child = withClockAndReset(io.clockB, io.resetB) { Module(new ChildModule) }\n  clockB_child.io.in := io.stuff\n}\n")),(0,l.kt)("p",null,"If you only want to connect your clock to a new clock domain and use the regular implicit reset signal, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"withClock(clock)")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"withClockAndReset"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\n\nclass MultiClockModule extends Module {\n  val io = IO(new Bundle {\n    val clockB = Input(Clock())\n    val stuff = Input(Bool())\n  })\n\n  // This register is clocked against the module clock.\n  val regClock = RegNext(io.stuff)\n\n  withClock (io.clockB) {\n    // In this withClock scope, all synchronous elements are clocked against io.clockB.\n\n    // This register is clocked against io.clockB, but uses implict reset from the parent context.\n    val regClockB = RegNext(io.stuff)\n  }\n\n  // This register is also clocked against the module clock.\n  val regClock2 = RegNext(io.stuff)\n}\n\n// Instantiate module in another clock domain with implicit reset.\nclass MultiClockModule2 extends Module {\n  val io = IO(new Bundle {\n    val clockB = Input(Clock())\n    val stuff = Input(Bool())\n  })\n  val clockB_child = withClock(io.clockB) { Module(new ChildModule) }\n  clockB_child.io.in := io.stuff\n}\n\nclass ChildModule extends Module {\n  val io = IO(new Bundle{\n    val in = Input(Bool())\n  })\n}\n\n")))}d.isMDXComponent=!0}}]);
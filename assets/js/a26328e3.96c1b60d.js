"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[8235],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(t),m=i,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return t?a.createElement(h,l(l({ref:n},d),{},{components:t})):a.createElement(h,l({ref:n},d))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[p]="string"==typeof e?e:i,l[1]=r;for(var c=2;c<o;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3393:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const o={layout:"docs",title:"Interfaces and Connections",section:"chisel3"},l="Interfaces & Connections",r={unversionedId:"explanations/interfaces-and-connections",id:"explanations/interfaces-and-connections",title:"Interfaces and Connections",description:"For more sophisticated modules it is often useful to define and instantiate interface classes while defining the IO for a module. First and foremost, interface classes promote reuse allowing users to capture once and for all common interfaces in a useful form.",source:"@site/docs/explanations/interfaces-and-connections.md",sourceDirName:"explanations",slug:"/explanations/interfaces-and-connections",permalink:"/chisel/docs/explanations/interfaces-and-connections",draft:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/explanations/interfaces-and-connections.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Interfaces and Connections",section:"chisel3"},sidebar:"tutorialSidebar",previous:{title:"Functional Module Creation",permalink:"/chisel/docs/explanations/functional-module-creation"},next:{title:"Intrinsics",permalink:"/chisel/docs/explanations/intrinsics"}},s={},c=[{value:"Ports: Subclasses &amp; Nesting",id:"ports-subclasses--nesting",level:2},{value:"Bundle Vectors",id:"bundle-vectors",level:2},{value:"Bulk Connections",id:"bulk-connections",level:2},{value:"<code>MonoConnect</code> Algorithm",id:"monoconnect-algorithm",level:3},{value:"<code>BiConnect</code> Algorithm",id:"biconnect-algorithm",level:3},{value:"The standard ready-valid interface (ReadyValidIO / Decoupled)",id:"the-standard-ready-valid-interface-readyvalidio--decoupled",level:2}],d={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"interfaces--connections"},"Interfaces & Connections"),(0,i.kt)("p",null,"For more sophisticated modules it is often useful to define and instantiate interface classes while defining the IO for a module. First and foremost, interface classes promote reuse allowing users to capture once and for all common interfaces in a useful form."),(0,i.kt)("p",null,"Secondly, interfaces allow users to dramatically reduce wiring by supporting bulk connections between producer and consumer modules. Finally, users can make changes in large interfaces in one place reducing the number of updates required when adding or removing pieces of the interface."),(0,i.kt)("p",null,"Note that Chisel has some built-in standard interface which should be used whenever possible for interoperability (e.g. Decoupled)."),(0,i.kt)("h2",{id:"ports-subclasses--nesting"},"Ports: Subclasses & Nesting"),(0,i.kt)("p",null,"As we saw earlier, users can define their own interfaces by defining a class that subclasses Bundle. For example, a user could define a simple link for hand-shaking data as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"class SimpleLink extends Bundle {\n  val data = Output(UInt(16.W))\n  val valid = Output(Bool())\n}\n")),(0,i.kt)("p",null,"We can then extend SimpleLink by adding parity bits using bundle inheritance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"class PLink extends SimpleLink {\n  val parity = Output(UInt(5.W))\n}\n")),(0,i.kt)("p",null,"In general, users can organize their interfaces into hierarchies using inheritance."),(0,i.kt)("p",null,"From there we can define a filter interface by nesting two PLinks into a new FilterIO bundle:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"class FilterIO extends Bundle {\n  val x = Flipped(new PLink)\n  val y = new PLink\n}\n")),(0,i.kt)("p",null,"where flip recursively changes the direction of a bundle, changing input to output and output to input."),(0,i.kt)("p",null,"We can now define a filter by defining a filter class extending module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"class Filter extends Module {\n  val io = IO(new FilterIO)\n  // ...\n}\n")),(0,i.kt)("p",null,"where the io field contains FilterIO."),(0,i.kt)("h2",{id:"bundle-vectors"},"Bundle Vectors"),(0,i.kt)("p",null,"Beyond single elements, vectors of elements form richer hierarchical interfaces. For example, in order to create a crossbar with a vector of inputs, producing a vector of outputs, and selected by a UInt input, we utilize the Vec constructor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3.util.log2Ceil\nclass CrossbarIo(n: Int) extends Bundle {\n  val in = Vec(n, Flipped(new PLink))\n  val sel = Input(UInt(log2Ceil(n).W))\n  val out = Vec(n, new PLink)\n}\n")),(0,i.kt)("p",null,"where Vec takes a size as the first argument and a block returning a port as the second argument."),(0,i.kt)("h2",{id:"bulk-connections"},"Bulk Connections"),(0,i.kt)("p",null,"Once we have a defined Interface, we can connect to it via a ",(0,i.kt)("a",{parentName:"p",href:"https://www.chisel-lang.org/api/latest/chisel3/Data.html#:="},(0,i.kt)("inlineCode",{parentName:"a"},"MonoConnect"))," operator (",(0,i.kt)("inlineCode",{parentName:"p"},":="),") or ",(0,i.kt)("a",{parentName:"p",href:"https://www.chisel-lang.org/api/latest/chisel3/Data.html#%3C%3E"},(0,i.kt)("inlineCode",{parentName:"a"},"BiConnect"))," operator (",(0,i.kt)("inlineCode",{parentName:"p"},"<>"),")."),(0,i.kt)("h3",{id:"monoconnect-algorithm"},(0,i.kt)("inlineCode",{parentName:"h3"},"MonoConnect")," Algorithm"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MonoConnect.connect"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},":="),", executes a mono-directional connection element-wise."),(0,i.kt)("p",null,"Note that this isn't commutative. There is an explicit source and sink\nalready determined before this function is called."),(0,i.kt)("p",null,"The connect operation will recurse down the left Data (with the right Data).\nAn exception will be thrown if a movement through the left cannot be matched\nin the right. The right side is allowed to have extra fields.\nVecs must still be exactly the same size."),(0,i.kt)("p",null,"Note that the LHS element must be writable so, one of these must hold:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Is an internal writable node (",(0,i.kt)("inlineCode",{parentName:"li"},"Reg")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"Wire"),")"),(0,i.kt)("li",{parentName:"ul"},"Is an output of the current module"),(0,i.kt)("li",{parentName:"ul"},"Is an input of a submodule of the current module")),(0,i.kt)("p",null,"Note that the RHS element must be readable so, one of these must hold:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Is an internal readable node (",(0,i.kt)("inlineCode",{parentName:"li"},"Reg"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Wire"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Op"),")"),(0,i.kt)("li",{parentName:"ul"},"Is a literal"),(0,i.kt)("li",{parentName:"ul"},"Is a port of the current module or submodule of the current module")),(0,i.kt)("h3",{id:"biconnect-algorithm"},(0,i.kt)("inlineCode",{parentName:"h3"},"BiConnect")," Algorithm"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BiConnect.connect"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"<>"),", executes a bidirectional connection element-wise. Note that the arguments are left and right (not source and sink) so the intent is for the operation to be commutative. The connect operation will recurse down the left ",(0,i.kt)("inlineCode",{parentName:"p"},"Data")," (with the right ",(0,i.kt)("inlineCode",{parentName:"p"},"Data"),"). An exception will be thrown if a movement through the left cannot be matched in the right, or if the right side has extra fields."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: We highly encourage new code to be written with the ",(0,i.kt)("a",{parentName:"p",href:"https://www.chisel-lang.org/chisel3/docs/explanations/connectable.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Connectable")," Operators")," rather than the ",(0,i.kt)("inlineCode",{parentName:"p"},"<>")," operator.")),(0,i.kt)("p",null,"Using the biconnect ",(0,i.kt)("inlineCode",{parentName:"p"},"<>")," operator, we can now compose two filters into a filter block as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"class Block extends Module {\n  val io = IO(new FilterIO)\n  val f1 = Module(new Filter)\n  val f2 = Module(new Filter)\n  f1.io.x <> io.x\n  f1.io.y <> f2.io.x\n  f2.io.y <> io.y\n}\n")),(0,i.kt)("p",null,"The bidirectional bulk connection operator ",(0,i.kt)("inlineCode",{parentName:"p"},"<>")," connects leaf ports of the same name to each other. The Scala types of the Bundles are not required to match. If one named signal is missing from either side, Chisel will give an error such as in the following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"\nclass NotReallyAFilterIO extends Bundle {\n  val x = Flipped(new PLink)\n  val y = new PLink\n  val z = Output(new Bool())\n}\nclass Block2 extends Module {\n  val io1 = IO(new FilterIO)\n  val io2 = IO(Flipped(new NotReallyAFilterIO))\n\n  io1 <> io2\n}\n")),(0,i.kt)("p",null,"Below we can see the resulting error for this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"ChiselStage.emitSystemVerilog(new Block2)\n// chisel3.package$ChiselException: Connection between left (Block2.io1: IO[FilterIO]) and source (Block2.io2: IO[NotReallyAFilterIO]) failed @.z: Left Record missing field (z).\n//  at ... ()\n//  at repl.MdocSession$MdocApp$Block2.<init>(interfaces-and-connections.md:89)\n//  at repl.MdocSession$MdocApp$$anonfun$22$$anonfun$apply$20.apply(interfaces-and-connections.md:97)\n//  at repl.MdocSession$MdocApp$$anonfun$22$$anonfun$apply$20.apply(interfaces-and-connections.md:97)\n//  at ... ()\n//  at ... (Stack trace trimmed to user code only. Rerun with --full-stacktrace to see the full stack trace)\n")),(0,i.kt)("p",null,"Bidirectional connections should only be used with ",(0,i.kt)("strong",{parentName:"p"},"directioned elements")," (like IOs), e.g. connecting two wires isn't supported since Chisel can't necessarily figure out the directions automatically.\nFor example, putting two temporary wires and connecting them here will not work, even though the directions could be known from the endpoints:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"\nclass BlockWithTemporaryWires extends Module {\n  val io = IO(new FilterIO)\n  val f1 = Module(new Filter)\n  val f2 = Module(new Filter)\n  f1.io.x <> io.x\n val tmp1 = Wire(new FilterIO)\n val tmp2 = Wire(new FilterIO)\n  f1.io.y <> tmp1\n  tmp1 <> tmp2\n  tmp2 <> f2.io.x\n  f2.io.y <> io.y\n}\n\n")),(0,i.kt)("p",null,"Below we can see the resulting error for this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"ChiselStage.emitSystemVerilog(new BlockWithTemporaryWires)\n// chisel3.package$ChiselException: Connection between left (Filter.io.y: IO[PLink]) and source (BlockWithTemporaryWires.tmp1: Wire[FilterIO]) failed @.y: Left Record missing field (y).\n//  at ... ()\n//  at repl.MdocSession$MdocApp$BlockWithTemporaryWires.<init>(interfaces-and-connections.md:113)\n//  at repl.MdocSession$MdocApp$$anonfun$33$$anonfun$apply$29.apply(interfaces-and-connections.md:124)\n//  at repl.MdocSession$MdocApp$$anonfun$33$$anonfun$apply$29.apply(interfaces-and-connections.md:124)\n//  at ... ()\n//  at ... (Stack trace trimmed to user code only. Rerun with --full-stacktrace to see the full stack trace)\n")),(0,i.kt)("p",null,"For more details and information, see ",(0,i.kt)("a",{parentName:"p",href:"connection-operators"},"Deep Dive into Connection Operators")),(0,i.kt)("p",null,"NOTE: When using ",(0,i.kt)("inlineCode",{parentName:"p"},"Chisel._")," (compatibility mode) instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"chisel3._"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},":=")," operator works in a bidirectional fashion similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"<>"),", but not exactly the same."),(0,i.kt)("h2",{id:"the-standard-ready-valid-interface-readyvalidio--decoupled"},"The standard ready-valid interface (ReadyValidIO / Decoupled)"),(0,i.kt)("p",null,"Chisel provides a standard interface for ",(0,i.kt)("a",{parentName:"p",href:"http://inst.eecs.berkeley.edu/~cs150/Documents/Interfaces.pdf"},"ready-valid interfaces"),".\nA ready-valid interface consists of a ",(0,i.kt)("inlineCode",{parentName:"p"},"ready")," signal, a ",(0,i.kt)("inlineCode",{parentName:"p"},"valid")," signal, and some data stored in ",(0,i.kt)("inlineCode",{parentName:"p"},"bits"),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"ready")," bit indicates that a consumer is ",(0,i.kt)("em",{parentName:"p"},"ready")," to consume data.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"valid")," bit indicates that a producer has ",(0,i.kt)("em",{parentName:"p"},"valid")," data on ",(0,i.kt)("inlineCode",{parentName:"p"},"bits"),".\nWhen both ",(0,i.kt)("inlineCode",{parentName:"p"},"ready")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"valid")," are asserted, a data transfer from the producer to the consumer takes place.\nA convenience method ",(0,i.kt)("inlineCode",{parentName:"p"},"fire")," is provided that is asserted if both ",(0,i.kt)("inlineCode",{parentName:"p"},"ready")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"valid")," are asserted."),(0,i.kt)("p",null,"Usually, we use the utility function ",(0,i.kt)("a",{parentName:"p",href:"https://chisel.eecs.berkeley.edu/api/latest/chisel3/util/Decoupled$.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Decoupled()"))," to turn any type into a ready-valid interface rather than directly using ",(0,i.kt)("a",{parentName:"p",href:"http://chisel.eecs.berkeley.edu/api/latest/chisel3/util/ReadyValidIO.html"},"ReadyValidIO"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Decoupled(...)")," creates a producer / output ready-valid interface (i.e. bits is an output)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Flipped(Decoupled(...))")," creates a consumer / input ready-valid interface (i.e. bits is an input).")),(0,i.kt)("p",null,"Take a look at the following example Chisel code to better understand exactly what is generated:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\nimport chisel3.util.Decoupled\n\n/**\n  * Using Decoupled(...) creates a producer interface.\n  * i.e. it has bits as an output.\n  * This produces the following ports:\n  *   input         io_readyValid_ready,\n  *   output        io_readyValid_valid,\n  *   output [31:0] io_readyValid_bits\n  */\nclass ProducingData extends Module {\n  val io = IO(new Bundle {\n    val readyValid = Decoupled(UInt(32.W))\n  })\n  // do something with io.readyValid.ready\n  io.readyValid.valid := true.B\n  io.readyValid.bits := 5.U\n}\n\n/**\n  * Using Flipped(Decoupled(...)) creates a consumer interface.\n  * i.e. it has bits as an input.\n  * This produces the following ports:\n  *   output        io_readyValid_ready,\n  *   input         io_readyValid_valid,\n  *   input  [31:0] io_readyValid_bits\n  */\nclass ConsumingData extends Module {\n  val io = IO(new Bundle {\n    val readyValid = Flipped(Decoupled(UInt(32.W)))\n  })\n  io.readyValid.ready := false.B\n  // do something with io.readyValid.valid\n  // do something with io.readyValid.bits\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DecoupledIO")," is a ready-valid interface with the ",(0,i.kt)("em",{parentName:"p"},"convention")," that there are no guarantees placed on deasserting ",(0,i.kt)("inlineCode",{parentName:"p"},"ready")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"valid")," or on the stability of ",(0,i.kt)("inlineCode",{parentName:"p"},"bits"),".\nThat means ",(0,i.kt)("inlineCode",{parentName:"p"},"ready")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"valid")," can also be deasserted without a data transfer."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"IrrevocableIO")," is a ready-valid interface with the ",(0,i.kt)("em",{parentName:"p"},"convention")," that the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"bits")," will not change while ",(0,i.kt)("inlineCode",{parentName:"p"},"valid")," is asserted and ",(0,i.kt)("inlineCode",{parentName:"p"},"ready")," is deasserted.\nAlso, the consumer shall keep ",(0,i.kt)("inlineCode",{parentName:"p"},"ready")," asserted after a cycle where ",(0,i.kt)("inlineCode",{parentName:"p"},"ready")," was high and ",(0,i.kt)("inlineCode",{parentName:"p"},"valid")," was low.\nNote that the ",(0,i.kt)("em",{parentName:"p"},"irrevocable")," constraint ",(0,i.kt)("em",{parentName:"p"},"is only a convention")," and cannot be enforced by the interface.\nChisel does not automatically generate checkers or assertions to enforce the ",(0,i.kt)("em",{parentName:"p"},"irrevocable")," convention."))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[4930],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(t),c=o,f=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return t?a.createElement(f,r(r({ref:n},d),{},{components:t})):a.createElement(f,r({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},1925:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const i={layout:"docs",title:"Polymorphism and Parameterization",section:"chisel3"},r="Polymorphism and Parameterization",l={unversionedId:"explanations/polymorphism-and-parameterization",id:"explanations/polymorphism-and-parameterization",title:"Polymorphism and Parameterization",description:"This section is advanced and can be skipped at first reading.",source:"@site/docs/explanations/polymorphism-and-parameterization.md",sourceDirName:"explanations",slug:"/explanations/polymorphism-and-parameterization",permalink:"/chisel/docs/explanations/polymorphism-and-parameterization",draft:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/explanations/polymorphism-and-parameterization.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Polymorphism and Parameterization",section:"chisel3"},sidebar:"tutorialSidebar",previous:{title:"Operators",permalink:"/chisel/docs/explanations/operators"},next:{title:"Ports",permalink:"/chisel/docs/explanations/ports"}},s={},p=[{value:"Parameterized Functions",id:"parameterized-functions",level:2},{value:"Parameterized Classes",id:"parameterized-classes",level:2},{value:"Parametrization based on Modules",id:"parametrization-based-on-modules",level:2}],d={toc:p},u="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"polymorphism-and-parameterization"},"Polymorphism and Parameterization"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"This section is advanced and can be skipped at first reading.")),(0,o.kt)("p",null,"Scala is a strongly typed language and uses parameterized types to specify generic functions and classes.\nIn this section, we show how Chisel users can define their own reusable functions and classes using parameterized classes."),(0,o.kt)("h2",{id:"parameterized-functions"},"Parameterized Functions"),(0,o.kt)("p",null,"Earlier we defined ",(0,o.kt)("inlineCode",{parentName:"p"},"Mux2")," on ",(0,o.kt)("inlineCode",{parentName:"p"},"Bool"),", but now we show how we can define a generic multiplexer function.\nWe define this function as taking a boolean condition and con and alt arguments (corresponding to then and else expressions) of type ",(0,o.kt)("inlineCode",{parentName:"p"},"T"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"def Mux[T <: Bits](c: Bool, con: T, alt: T): T = { ... }\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," is required to be a subclass of ",(0,o.kt)("inlineCode",{parentName:"p"},"Bits"),".\nScala ensures that in each usage of ",(0,o.kt)("inlineCode",{parentName:"p"},"Mux"),", it can find a common superclass of the actual con and alt argument types,\notherwise it causes a Scala compilation type error.\nFor example,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"Mux(c, UInt(10), UInt(11))\n")),(0,o.kt)("p",null,"yields a ",(0,o.kt)("inlineCode",{parentName:"p"},"UInt")," wire because the ",(0,o.kt)("inlineCode",{parentName:"p"},"con")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"alt")," arguments are each of type ",(0,o.kt)("inlineCode",{parentName:"p"},"UInt"),"."),(0,o.kt)("h2",{id:"parameterized-classes"},"Parameterized Classes"),(0,o.kt)("p",null,"Like parameterized functions, we can also parameterize classes to make them more reusable.\nFor instance, we can generalize the Filter class to use any kind of link.\nWe do so by parameterizing the ",(0,o.kt)("inlineCode",{parentName:"p"},"FilterIO")," class and defining the constructor to take a single argument ",(0,o.kt)("inlineCode",{parentName:"p"},"gen")," of type ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," as below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class FilterIO[T <: Data](gen: T) extends Bundle {\n  val x = Input(gen)\n  val y = Output(gen)\n}\n")),(0,o.kt)("p",null,"We can now define ",(0,o.kt)("inlineCode",{parentName:"p"},"Filter")," by defining a module class that also takes a link type constructor argument and passes it through to the ",(0,o.kt)("inlineCode",{parentName:"p"},"FilterIO")," interface constructor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class Filter[T <: Data](gen: T) extends Module {\n  val io = IO(new FilterIO(gen))\n  // ...\n}\n")),(0,o.kt)("p",null,"We can now define a ",(0,o.kt)("inlineCode",{parentName:"p"},"PLink"),"-based ",(0,o.kt)("inlineCode",{parentName:"p"},"Filter")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"val f = Module(new Filter(new PLink))\n")),(0,o.kt)("p",null,"A generic FIFO could be defined as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3.util.log2Up\n\nclass DataBundle extends Bundle {\n  val a = UInt(32.W)\n  val b = UInt(32.W)\n}\n\nclass Fifo[T <: Data](gen: T, n: Int) extends Module {\n  val io = IO(new Bundle {\n    val enqVal = Input(Bool())\n    val enqRdy = Output(Bool())\n    val deqVal = Output(Bool())\n    val deqRdy = Input(Bool())\n    val enqDat = Input(gen)\n    val deqDat = Output(gen)\n  })\n  val enqPtr     = RegInit(0.U((log2Up(n)).W))\n  val deqPtr     = RegInit(0.U((log2Up(n)).W))\n  val isFull     = RegInit(false.B)\n  val doEnq      = io.enqRdy && io.enqVal\n  val doDeq      = io.deqRdy && io.deqVal\n  val isEmpty    = !isFull && (enqPtr === deqPtr)\n  val deqPtrInc  = deqPtr + 1.U\n  val enqPtrInc  = enqPtr + 1.U\n  val isFullNext = Mux(doEnq && ~doDeq && (enqPtrInc === deqPtr),\n                         true.B, Mux(doDeq && isFull, false.B,\n                         isFull))\n  enqPtr := Mux(doEnq, enqPtrInc, enqPtr)\n  deqPtr := Mux(doDeq, deqPtrInc, deqPtr)\n  isFull := isFullNext\n  val ram = Mem(n, gen)\n  when (doEnq) {\n    ram(enqPtr) := io.enqDat\n  }\n  io.enqRdy := !isFull\n  io.deqVal := !isEmpty\n  ram(deqPtr) <> io.deqDat\n}\n")),(0,o.kt)("p",null,"An Fifo with 8 elements of type DataBundle could then be instantiated as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"val fifo = Module(new Fifo(new DataBundle, 8))\n")),(0,o.kt)("p",null,"It is also possible to define a generic decoupled (ready/valid) interface:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class DecoupledIO[T <: Data](data: T) extends Bundle {\n  val ready = Input(Bool())\n  val valid = Output(Bool())\n  val bits  = Output(data)\n}\n")),(0,o.kt)("p",null,"This template can then be used to add a handshaking protocol to any\nset of signals:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class DecoupledDemo extends DecoupledIO(new DataBundle)\n")),(0,o.kt)("p",null,"The FIFO interface can be now be simplified as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class Fifo[T <: Data](data: T, n: Int) extends Module {\n  val io = IO(new Bundle {\n    val enq = Flipped(new DecoupledIO(data))\n    val deq = new DecoupledIO(data)\n  })\n  // ...\n}\n")),(0,o.kt)("h2",{id:"parametrization-based-on-modules"},"Parametrization based on Modules"),(0,o.kt)("p",null,"You can also parametrize modules based on other modules rather than just types. The following is an example of a module parametrized by other modules as opposed to e.g. types."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3.RawModule\nimport chisel3.experimental.BaseModule\nimport circt.stage.ChiselStage\n\n// Provides a more specific interface since generic Module\n// provides no compile-time information on generic module's IOs.\ntrait MyAdder {\n    def in1: UInt\n    def in2: UInt\n    def out: UInt\n}\n\nclass Mod1 extends RawModule with MyAdder {\n    val in1 = IO(Input(UInt(8.W)))\n    val in2 = IO(Input(UInt(8.W)))\n    val out = IO(Output(UInt(8.W)))\n    out := in1 + in2\n}\n\nclass Mod2 extends RawModule with MyAdder {\n    val in1 = IO(Input(UInt(8.W)))\n    val in2 = IO(Input(UInt(8.W)))\n    val out = IO(Output(UInt(8.W)))\n    out := in1 - in2\n}\n\nclass X[T <: BaseModule with MyAdder](genT: => T) extends Module {\n    val io = IO(new Bundle {\n        val in1 = Input(UInt(8.W))\n        val in2 = Input(UInt(8.W))\n        val out = Output(UInt(8.W))\n    })\n    val subMod = Module(genT)\n    io.out := subMod.out\n    subMod.in1 := io.in1\n    subMod.in2 := io.in2\n}\n\nprintln(ChiselStage.emitSystemVerilog(new X(new Mod1)))\nprintln(ChiselStage.emitSystemVerilog(new X(new Mod2)))\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-verilog"},"// Generated by CIRCT firtool-1.56.0\nmodule Mod1(    // <stdin>:3:3\n  input  [7:0] in1, // polymorphism-and-parameterization.md:171:17\n               in2, // polymorphism-and-parameterization.md:172:17\n  output [7:0] out  // polymorphism-and-parameterization.md:173:17\n);\n\n  assign out = in1 + in2;   // <stdin>:3:3, polymorphism-and-parameterization.md:174:16\nendmodule\n\nmodule X(   // <stdin>:12:3\n  input        clock,   // <stdin>:13:11\n               reset,   // <stdin>:14:11\n  input  [7:0] io_in1,  // polymorphism-and-parameterization.md:187:16\n               io_in2,  // polymorphism-and-parameterization.md:187:16\n  output [7:0] io_out   // polymorphism-and-parameterization.md:187:16\n);\n\n  Mod1 subMod ( // polymorphism-and-parameterization.md:192:24\n    .in1 (io_in1),\n    .in2 (io_in2),\n    .out (io_out)\n  );\nendmodule\n\n// Generated by CIRCT firtool-1.56.0\nmodule Mod2(    // <stdin>:3:3\n  input  [7:0] in1, // polymorphism-and-parameterization.md:179:17\n               in2, // polymorphism-and-parameterization.md:180:17\n  output [7:0] out  // polymorphism-and-parameterization.md:181:17\n);\n\n  assign out = in1 - in2;   // <stdin>:3:3, polymorphism-and-parameterization.md:182:16\nendmodule\n\nmodule X(   // <stdin>:12:3\n  input        clock,   // <stdin>:13:11\n               reset,   // <stdin>:14:11\n  input  [7:0] io_in1,  // polymorphism-and-parameterization.md:187:16\n               io_in2,  // polymorphism-and-parameterization.md:187:16\n  output [7:0] io_out   // polymorphism-and-parameterization.md:187:16\n);\n\n  Mod2 subMod ( // polymorphism-and-parameterization.md:192:24\n    .in1 (io_in1),\n    .in2 (io_in2),\n    .out (io_out)\n  );\nendmodule\n\n")))}m.isMDXComponent=!0}}]);
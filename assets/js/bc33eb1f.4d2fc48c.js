"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[619],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,b=p["".concat(d,".").concat(m)]||p[m]||u[m]||i;return n?a.createElement(b,o(o({ref:t},s),{},{components:n})):a.createElement(b,o({ref:t},s))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1396:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={layout:"docs",title:"Decoders",section:"chisel3"},o="Decoders",l={unversionedId:"explanations/decoder",id:"explanations/decoder",title:"Decoders",description:"It is common in a complex design to recognize certain patterns from a big UInt coming from a data bus and dispatch",source:"@site/docs/explanations/decoder.md",sourceDirName:"explanations",slug:"/explanations/decoder",permalink:"/chisel/docs/explanations/decoder",draft:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/explanations/decoder.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Decoders",section:"chisel3"},sidebar:"tutorialSidebar",previous:{title:"DataView",permalink:"/chisel/docs/explanations/dataview"},next:{title:"Functional Abstraction",permalink:"/chisel/docs/explanations/functional-abstraction"}},d={},c=[{value:"Basic Decoders",id:"basic-decoders",level:2},{value:"DecoderTable",id:"decodertable",level:2}],s={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"decoders"},"Decoders"),(0,r.kt)("p",null,"It is common in a complex design to recognize certain patterns from a big ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt")," coming from a data bus and dispatch\nactions to next pipeline stage based on such observation. The circuit doing so can be called as 'decoders' such as\naddress decoders in a bus crossbar or instruction decoders in a CPU frontend. Chisel provides some utility class to\ngenerate them in ",(0,r.kt)("inlineCode",{parentName:"p"},"util.exprimental.decode")," package."),(0,r.kt)("h2",{id:"basic-decoders"},"Basic Decoders"),(0,r.kt)("p",null,"The simplest API provided by ",(0,r.kt)("inlineCode",{parentName:"p"},"decoder")," is essentially just a ",(0,r.kt)("inlineCode",{parentName:"p"},"TruthTable")," encoding your desired input and output."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import chisel3._\nimport chisel3.util.BitPat\nimport chisel3.util.experimental.decode._\n\nclass SimpleDecoder extends Module {\n  val table = TruthTable(\n    Map(\n      BitPat("b001") -> BitPat("b?"),\n      BitPat("b010") -> BitPat("b?"),\n      BitPat("b100") -> BitPat("b1"),\n      BitPat("b101") -> BitPat("b1"),\n      BitPat("b111") -> BitPat("b1")\n    ),\n    BitPat("b0"))\n  val input = IO(Input(UInt(3.W)))\n  val output = IO(Output(UInt(1.W)))\n  output := decoder(input, table)\n}\n')),(0,r.kt)("h2",{id:"decodertable"},"DecoderTable"),(0,r.kt)("p",null,"When the decoded result involves multiple fields, each with its own semantics, the ",(0,r.kt)("inlineCode",{parentName:"p"},"TruthTable")," can quickly be become\nhard to maintain. The ",(0,r.kt)("inlineCode",{parentName:"p"},"DecoderTable")," API is designed to generate decoder table from structured definitions."),(0,r.kt)("p",null,"The bridge from structured information to its encoding is ",(0,r.kt)("inlineCode",{parentName:"p"},"DecodePattern")," trait. The ",(0,r.kt)("inlineCode",{parentName:"p"},"bitPat")," member defines the input\n",(0,r.kt)("inlineCode",{parentName:"p"},"BitPat")," in the decode truth table, and other members can be defined to contain structured information."),(0,r.kt)("p",null,"To generate output side of the decode truth table, the trait to use is ",(0,r.kt)("inlineCode",{parentName:"p"},"DecodeField"),". Given an instance implementing the\n",(0,r.kt)("inlineCode",{parentName:"p"},"DecodePattern")," object, the ",(0,r.kt)("inlineCode",{parentName:"p"},"genTable")," method should return desired output."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import chisel3.util.BitPat\nimport chisel3.util.experimental.decode._\n\ncase class Pattern(val name: String, val code: BigInt) extends DecodePattern {\n  def bitPat: BitPat = BitPat("b" + code.toString(2))\n}\n\nobject NameContainsAdd extends BoolDecodeField[Pattern] {\n  def name = "name contains \'add\'"\n  def genTable(i: Pattern) = if (i.name.contains("add")) y else n\n}\n')),(0,r.kt)("p",null,"Then all ",(0,r.kt)("inlineCode",{parentName:"p"},"DecodePattern")," cases can be generated or read from external sources. And with all ",(0,r.kt)("inlineCode",{parentName:"p"},"DecodeField")," objects, the\ndecoder can be easily generated and output can be read by corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"DecodeField"),"s."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import chisel3._\nimport chisel3.util.experimental.decode._\n\nclass SimpleDecodeTable extends Module {\n  val allPossibleInputs = Seq(Pattern("addi", BigInt("0x2")) /* can be generated */)\n  val decodeTable = new DecodeTable(allPossibleInputs, Seq(NameContainsAdd))\n  \n  val input = IO(Input(UInt(4.W)))\n  val isAddType = IO(Output(Bool()))\n  val decodeResult = decodeTable.decode(input)\n  isAddType := decodeResult(NameContainsAdd)\n}\n')))}u.isMDXComponent=!0}}]);
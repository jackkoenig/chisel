"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[7462],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),p=d(t),m=o,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return t?a.createElement(h,l(l({ref:n},c),{},{components:t})):a.createElement(h,l({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[p]="string"==typeof e?e:o,l[1]=r;for(var d=2;d<i;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3190:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var a=t(7462),o=(t(7294),t(3905));const i={layout:"docs",title:"General Cookbook",section:"chisel3"},l="General Cookbook",r={unversionedId:"cookbooks/cookbook",id:"cookbooks/cookbook",title:"General Cookbook",description:"Please note that these examples make use of Chisel's scala-style printing.",source:"@site/docs/cookbooks/cookbook.md",sourceDirName:"cookbooks",slug:"/cookbooks/cookbook",permalink:"/chisel/docs/cookbooks/cookbook",draft:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/cookbooks/cookbook.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"General Cookbook",section:"chisel3"},sidebar:"tutorialSidebar",previous:{title:"Cookbooks",permalink:"/chisel/docs/cookbooks/"},next:{title:"DataView Cookbook",permalink:"/chisel/docs/cookbooks/dataview"}},s={},d=[{value:"Type Conversions",id:"type-conversions",level:2},{value:"How do I create a UInt from an instance of a Bundle?",id:"how-do-i-create-a-uint-from-an-instance-of-a-bundle",level:3},{value:"How do I create a Bundle from a UInt?",id:"how-do-i-create-a-bundle-from-a-uint",level:3},{value:"How can I tieoff a Bundle/Vec to 0?",id:"how-can-i-tieoff-a-bundlevec-to-0",level:3},{value:"How do I create a Vec of Bools from a UInt?",id:"how-do-i-create-a-vec-of-bools-from-a-uint",level:3},{value:"How do I create a UInt from a Vec of Bool?",id:"how-do-i-create-a-uint-from-a-vec-of-bool",level:3},{value:"How do I connect a subset of Bundle fields?",id:"how-do-i-connect-a-subset-of-bundle-fields",level:3},{value:"Vectors and Registers",id:"vectors-and-registers",level:2},{value:"Can I make a 2D or 3D Vector?",id:"can-i-make-a-2d-or-3d-vector",level:3},{value:"How do I create a Vector of Registers?",id:"how-do-i-create-a-vector-of-registers",level:3},{value:"How do I create a Reg of type Vec?",id:"how-do-i-create-a-reg-of-type-vec",level:3},{value:"How do I partially reset an Aggregate Reg?",id:"how-do-i-partially-reset-an-aggregate-reg",level:3},{value:"Bundles",id:"bundles",level:2},{value:'<a name="aliased-bundle-fields"></a> How do I deal with aliased Bundle fields?',id:"-how-do-i-deal-with-aliased-bundle-fields",level:3},{value:"1. 0-arity function parameters",id:"1-0-arity-function-parameters",level:4},{value:"2. By-name function parameters",id:"2-by-name-function-parameters",level:4},{value:"3. Directioned Bundle fields",id:"3-directioned-bundle-fields",level:4},{value:"4. Call <code>.cloneType</code> directly",id:"4-call-clonetype-directly",level:4},{value:'<a name="bundle-unable-to-clone"></a> How do I deal with the &quot;unable to clone&quot; error?',id:"-how-do-i-deal-with-the-unable-to-clone-error",level:3},{value:"How do I create a finite state machine (FSM)?",id:"how-do-i-create-a-finite-state-machine-fsm",level:3},{value:"How do I unpack a value (&quot;reverse concatenation&quot;) like in Verilog?",id:"how-do-i-unpack-a-value-reverse-concatenation-like-in-verilog",level:3},{value:"How do I do subword assignment (assign to some bits in a UInt)?",id:"how-do-i-do-subword-assignment-assign-to-some-bits-in-a-uint",level:3},{value:"How do I create an optional I/O?",id:"how-do-i-create-an-optional-io",level:3},{value:"How do I create I/O without a prefix?",id:"how-do-i-create-io-without-a-prefix",level:3},{value:"How do I minimize the number of bits used in an output vector?",id:"how-do-i-minimize-the-number-of-bits-used-in-an-output-vector",level:3},{value:'<a id="dynamic-index-too-wide-narrow" /> How do I resolve &quot;Dynamic index ... is too wide/narrow for extractee ...&quot;?',id:"-how-do-i-resolve-dynamic-index--is-too-widenarrow-for-extractee-",level:3},{value:"Use bit extraction when the index is too wide",id:"use-bit-extraction-when-the-index-is-too-wide",level:4},{value:"Predictable Naming",id:"predictable-naming",level:2},{value:"How do I get Chisel to name signals properly in blocks like when/withClockAndReset?",id:"how-do-i-get-chisel-to-name-signals-properly-in-blocks-like-whenwithclockandreset",level:3},{value:"How do I get Chisel to name the results of vector reads properly?",id:"how-do-i-get-chisel-to-name-the-results-of-vector-reads-properly",level:3},{value:"How can I dynamically set/parametrize the name of a module?",id:"how-can-i-dynamically-setparametrize-the-name-of-a-module",level:3},{value:"Directionality",id:"directionality",level:2},{value:"How do I strip directions from a bidirectional Bundle (or other Data)?",id:"how-do-i-strip-directions-from-a-bidirectional-bundle-or-other-data",level:3}],c={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"general-cookbook"},"General Cookbook"),(0,o.kt)("p",null,"Please note that these examples make use of ",(0,o.kt)("a",{parentName:"p",href:"../explanations/printing#scala-style"},"Chisel's scala-style printing"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Type Conversions",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-create-a-uint-from-an-instance-of-a-bundle"},"How do I create a UInt from an instance of a Bundle?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-create-a-bundle-from-a-uint"},"How do I create a Bundle from a UInt?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-can-i-tieoff-a-bundlevec-to-0"},"How can I tieoff a Bundle/Vec to 0?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-create-a-vec-of-bools-from-a-uint"},"How do I create a Vec of Bools from a UInt?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-create-a-uint-from-a-vec-of-bool"},"How do I create a UInt from a Vec of Bool?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-connect-a-subset-of-bundle-fields"},"How do I connect a subset of Bundle fields?")))),(0,o.kt)("li",{parentName:"ul"},"Vectors and Registers",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#can-i-make-a-2D-or-3D-Vector"},"Can I make a 2D or 3D Vector?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-create-a-vector-of-registers"},"How do I create a Vector of Registers?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-create-a-reg-of-type-vec"},"How do I create a Reg of type Vec?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-partially-reset-an-aggregate-reg"},"How do I partially reset an Aggregate Reg?")))),(0,o.kt)("li",{parentName:"ul"},"Bundles",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#aliased-bundle-fields"},"How do I deal with aliased Bundle fields?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#bundle-unable-to-clone"},'How do I deal with the "unable to clone" error?')))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-create-a-finite-state-machine-fsm"},"How do I create a finite state machine?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-unpack-a-value-reverse-concatenation-like-in-verilog"},'How do I unpack a value ("reverse concatenation") like in Verilog?')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-do-subword-assignment-assign-to-some-bits-in-a-uint"},"How do I do subword assignment (assign to some bits in a UInt)?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-create-an-optional-io"},"How do I create an optional I/O?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-create-io-without-a-prefix"},"How do I create I/O without a prefix?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-minimize-the-number-of-bits-used-in-an-output-vector"},"How do I minimize the number of bits used in an output vector")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#dynamic-index-too-wide-narrow"},'How do I resolve "Dynamic index ... is too wide/narrow for extractee ..."?')),(0,o.kt)("li",{parentName:"ul"},"Predictable Naming",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-get-chisel-to-name-signals-properly-in-blocks-like-whenwithclockandreset"},"How do I get Chisel to name signals properly in blocks like when/withClockAndReset?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-get-chisel-to-name-the-results-of-vector-reads-properly"},"How do I get Chisel to name the results of vector reads properly?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-can-i-dynamically-setparametrize-the-name-of-a-module"},"How can I dynamically set/parametrize the name of a module?")))),(0,o.kt)("li",{parentName:"ul"},"Directionality",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-do-i-strip-directions-from-a-bidirectional-bundle-or-other-data"},"How do I strip directions from a bidirectional Bundle (or other Data)?"))))),(0,o.kt)("h2",{id:"type-conversions"},"Type Conversions"),(0,o.kt)("h3",{id:"how-do-i-create-a-uint-from-an-instance-of-a-bundle"},"How do I create a UInt from an instance of a Bundle?"),(0,o.kt)("p",null,"Call ",(0,o.kt)("a",{parentName:"p",href:"https://www.chisel-lang.org/api/latest/chisel3/Bundle.html#asUInt:chisel3.UInt"},(0,o.kt)("inlineCode",{parentName:"a"},"asUInt"))," on the ",(0,o.kt)("a",{parentName:"p",href:"https://www.chisel-lang.org/api/latest/chisel3/Bundle.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Bundle"))," instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import chisel3._\n\nclass MyBundle extends Bundle {\n  val foo = UInt(4.W)\n  val bar = UInt(4.W)\n}\n\nclass Foo extends Module {\n  val bundle = Wire(new MyBundle)\n  bundle.foo := 0xc.U\n  bundle.bar := 0x3.U\n  val uint = bundle.asUInt\n  printf(cf"$uint") // 195\n\n  // Test\n  assert(uint === 0xc3.U)\n}\n')),(0,o.kt)("h3",{id:"how-do-i-create-a-bundle-from-a-uint"},"How do I create a Bundle from a UInt?"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("a",{parentName:"p",href:"https://www.chisel-lang.org/api/latest/chisel3/UInt.html#asTypeOf%5BT%3C:chisel3.Data%5D(that:T):T"},(0,o.kt)("inlineCode",{parentName:"a"},"asTypeOf"))," method to reinterpret the ",(0,o.kt)("a",{parentName:"p",href:"https://www.chisel-lang.org/api/latest/chisel3/UInt.html"},(0,o.kt)("inlineCode",{parentName:"a"},"UInt"))," as the type of the ",(0,o.kt)("a",{parentName:"p",href:"https://www.chisel-lang.org/api/latest/chisel3/Bundle.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Bundle")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import chisel3._\n\nclass MyBundle extends Bundle {\n  val foo = UInt(4.W)\n  val bar = UInt(4.W)\n}\n\nclass Foo extends Module {\n  val uint = 0xb4.U\n  val bundle = uint.asTypeOf(new MyBundle)\n\n  printf(cf"$bundle") // Bundle(foo -> 11, bar -> 4)\n\n  // Test\n  assert(bundle.foo === 0xb.U)\n  assert(bundle.bar === 0x4.U)\n}\n')),(0,o.kt)("h3",{id:"how-can-i-tieoff-a-bundlevec-to-0"},"How can I tieoff a Bundle/Vec to 0?"),(0,o.kt)("p",null,"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"asTypeOf")," as above. If you don't want to worry about the type of the thing\nyou are tying off, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"chiselTypeOf"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\nimport circt.stage.ChiselStage\n\nclass MyBundle extends Bundle {\n  val foo = UInt(4.W)\n  val bar = Vec(4, UInt(1.W))\n}\n\nclass Foo(typ: MyBundle) extends Module {\n  val bundleA = IO(Output(typ))\n  val bundleB = IO(Output(typ))\n\n  // typ is already a Chisel Data Type, so can use it directly here, but you\n  // need to know that bundleA is of type typ\n  bundleA := 0.U.asTypeOf(typ)\n\n  // bundleB is a Hardware data IO(Output(...)) so need to call chiselTypeOf,\n  // but this will work no matter the type of bundleB:\n  bundleB := 0.U.asTypeOf(chiselTypeOf(bundleB))\n}\n\nChiselStage.emitSystemVerilog(new Foo(new MyBundle))\n")),(0,o.kt)("h3",{id:"how-do-i-create-a-vec-of-bools-from-a-uint"},"How do I create a Vec of Bools from a UInt?"),(0,o.kt)("p",null,"Use ",(0,o.kt)("a",{parentName:"p",href:"https://www.chisel-lang.org/api/latest/chisel3/VecInit$.html"},(0,o.kt)("inlineCode",{parentName:"a"},"VecInit"))," given a ",(0,o.kt)("inlineCode",{parentName:"p"},"Seq[Bool]")," generated using the ",(0,o.kt)("a",{parentName:"p",href:"https://www.chisel-lang.org/api/latest/chisel3/UInt.html#asBools:Seq%5Bchisel3.Bool%5D"},(0,o.kt)("inlineCode",{parentName:"a"},"asBools"))," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import chisel3._\n\nclass Foo extends Module {\n  val uint = 0xc.U\n  val vec = VecInit(uint.asBools)\n\n  printf(cf"$vec") // Vec(0, 0, 1, 1)\n\n  // Test\n  assert(vec(0) === false.B)\n  assert(vec(1) === false.B)\n  assert(vec(2) === true.B)\n  assert(vec(3) === true.B)\n}\n')),(0,o.kt)("h3",{id:"how-do-i-create-a-uint-from-a-vec-of-bool"},"How do I create a UInt from a Vec of Bool?"),(0,o.kt)("p",null,"Use the builtin function ",(0,o.kt)("a",{parentName:"p",href:"https://www.chisel-lang.org/api/latest/chisel3/Vec.html#asUInt:chisel3.UInt"},(0,o.kt)("inlineCode",{parentName:"a"},"asUInt"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import chisel3._\n\nclass Foo extends Module {\n  val vec = VecInit(true.B, false.B, true.B, true.B)\n  val uint = vec.asUInt\n\n  printf(cf"$uint") // 13\n\n  // Test\n  // (remember leftmost Bool in Vec is low order bit)\n  assert(0xd.U === uint)\n\n}\n')),(0,o.kt)("h3",{id:"how-do-i-connect-a-subset-of-bundle-fields"},"How do I connect a subset of Bundle fields?"),(0,o.kt)("p",null,"See the ",(0,o.kt)("a",{parentName:"p",href:"dataview#how-do-i-connect-a-subset-of-bundle-fields"},"DataView cookbook"),"."),(0,o.kt)("h2",{id:"vectors-and-registers"},"Vectors and Registers"),(0,o.kt)("h3",{id:"can-i-make-a-2d-or-3d-vector"},"Can I make a 2D or 3D Vector?"),(0,o.kt)("p",null,"Yes. Using ",(0,o.kt)("inlineCode",{parentName:"p"},"VecInit")," you can make Vectors that hold Vectors of Chisel types. Methods ",(0,o.kt)("inlineCode",{parentName:"p"},"fill")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tabulate")," make these multi-dimensional Vectors."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\n\nclass MyBundle extends Bundle {\n  val foo = UInt(4.W)\n  val bar = UInt(4.W)\n}\n\nclass Foo extends Module {\n  //2D Fill\n  val twoDVec = VecInit.fill(2, 3)(5.U)\n  //3D Fill\n  val myBundle = Wire(new MyBundle)\n  myBundle.foo := 0xc.U\n  myBundle.bar := 0x3.U\n  val threeDVec = VecInit.fill(1, 2, 3)(myBundle)\n  assert(threeDVec(0)(0)(0).foo === 0xc.U && threeDVec(0)(0)(0).bar === 0x3.U)\n\n  //2D Tabulate\n  val indexTiedVec = VecInit.tabulate(2, 2){ (x, y) => (x + y).U }\n  assert(indexTiedVec(0)(0) === 0.U)\n  assert(indexTiedVec(0)(1) === 1.U)\n  assert(indexTiedVec(1)(0) === 1.U)\n  assert(indexTiedVec(1)(1) === 2.U)\n  //3D Tabulate\n  val indexTiedVec3D = VecInit.tabulate(2, 3, 4){ (x, y, z) => (x + y * z).U }\n  assert(indexTiedVec3D(0)(0)(0) === 0.U)\n  assert(indexTiedVec3D(1)(1)(1) === 2.U)\n  assert(indexTiedVec3D(1)(1)(2) === 3.U)\n  assert(indexTiedVec3D(1)(1)(3) === 4.U)\n  assert(indexTiedVec3D(1)(2)(3) === 7.U)\n}\n")),(0,o.kt)("h3",{id:"how-do-i-create-a-vector-of-registers"},"How do I create a Vector of Registers?"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Rule!  Use Reg of Vec not Vec of Reg!")),(0,o.kt)("p",null,"You create a ",(0,o.kt)("a",{parentName:"p",href:"#how-do-i-create-a-reg-of-type-vec"},"Reg of type Vec"),". Because Vecs are a ",(0,o.kt)("em",{parentName:"p"},"type")," (like ",(0,o.kt)("inlineCode",{parentName:"p"},"UInt"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Bool"),") rather than a ",(0,o.kt)("em",{parentName:"p"},"value"),", we must bind the Vec to some concrete ",(0,o.kt)("em",{parentName:"p"},"value"),"."),(0,o.kt)("h3",{id:"how-do-i-create-a-reg-of-type-vec"},"How do I create a Reg of type Vec?"),(0,o.kt)("p",null,"For more information, the API Documentation for ",(0,o.kt)("a",{parentName:"p",href:"https://www.chisel-lang.org/api/latest/chisel3/Vec.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Vec"))," provides more information."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\n\nclass Foo extends Module {\n  val regOfVec = Reg(Vec(4, UInt(32.W))) // Register of 32-bit UInts\n  regOfVec(0) := 123.U                   // Assignments to elements of the Vec\n  regOfVec(1) := 456.U\n  regOfVec(2) := 789.U\n  regOfVec(3) := regOfVec(0)\n\n  // Reg of Vec of 32-bit UInts initialized to zero\n  //   Note that Seq.fill constructs 4 32-bit UInt literals with the value 0\n  //   VecInit(...) then constructs a Wire of these literals\n  //   The Reg is then initialized to the value of the Wire (which gives it the same type)\n  val initRegOfVec = RegInit(VecInit(Seq.fill(4)(0.U(32.W))))\n}\n")),(0,o.kt)("h3",{id:"how-do-i-partially-reset-an-aggregate-reg"},"How do I partially reset an Aggregate Reg?"),(0,o.kt)("p",null,"The easiest way is to use a partially-specified ",(0,o.kt)("a",{parentName:"p",href:"#../appendix/experimental-features#bundle-literals"},"Bundle Literal"),"\nor ",(0,o.kt)("a",{parentName:"p",href:"#../appendix/experimental-features#vec-literals"},"Vec Literal")," to match the type of the Reg."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\nimport chisel3.experimental.BundleLiterals._\n\nclass MyBundle extends Bundle {\n  val foo = UInt(8.W)\n  val bar = UInt(8.W)\n}\n\nclass MyModule extends Module {\n  // Only .foo will be reset, .bar will have no reset value\n  val reg = RegInit((new MyBundle).Lit(_.foo -> 123.U))\n}\n")),(0,o.kt)("p",null,"If your initial value is not a literal, or if you just prefer, you can use a\nWire as the initial value for the Reg. Simply connect fields to ",(0,o.kt)("inlineCode",{parentName:"p"},"DontCare")," that\nyou do not wish to be reset."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class MyModule2 extends Module {\n  val reg = RegInit({\n    // The wire could be constructed before the reg rather than in the RegInit scope,\n    // but this style has nice lexical scoping behavior, keeping the Wire private\n    val init = Wire(new MyBundle)\n    init := DontCare // No fields will be reset\n    init.foo := 123.U // Last connect override, .foo is reset\n    init\n  })\n}\n")),(0,o.kt)("h2",{id:"bundles"},"Bundles"),(0,o.kt)("h3",{id:"-how-do-i-deal-with-aliased-bundle-fields"},(0,o.kt)("a",{name:"aliased-bundle-fields"})," How do I deal with aliased Bundle fields?"),(0,o.kt)("p",null,"Following the ",(0,o.kt)("inlineCode",{parentName:"p"},"gen")," pattern when creating Bundles can result in some opaque error messages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class AliasedBundle[T <: Data](gen: T) extends Bundle {\n  val foo = gen\n  val bar = gen\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"getVerilogString(new Top(new AliasedBundle(UInt(8.W))))\n// chisel3.AliasedAggregateFieldException: AliasedBundle contains aliased fields named (bar,foo)\n//  at ... ()\n//  at repl.MdocSession$MdocApp17$Top$$anonfun$50$$anonfun$apply$37.apply(cookbook.md:301)\n//  at repl.MdocSession$MdocApp17$Top$$anonfun$50$$anonfun$apply$37.apply(cookbook.md:301)\n//  at chisel3.experimental.prefix$.apply(prefix.scala:50)\n//  at repl.MdocSession$MdocApp17$Top$$anonfun$50.apply(cookbook.md:301)\n//  at repl.MdocSession$MdocApp17$Top$$anonfun$50.apply(cookbook.md)\n//  at chisel3.internal.plugin.package$.autoNameRecursively(package.scala:33)\n//  at repl.MdocSession$MdocApp17$Top.<init>(cookbook.md:301)\n//  at repl.MdocSession$MdocApp17$$anonfun$55$$anonfun$apply$43.apply(cookbook.md:320)\n//  at repl.MdocSession$MdocApp17$$anonfun$55$$anonfun$apply$43.apply(cookbook.md:320)\n//  at ... ()\n//  at ... (Stack trace trimmed to user code only. Rerun with --full-stacktrace to see the full stack trace)\n")),(0,o.kt)("p",null,"This error is saying that fields ",(0,o.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bar")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"AliasedBundle")," are the\nexact same object in memory.\nThis is a problem for Chisel because we need to be able to distinguish uses of\n",(0,o.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bar")," but cannot when they are referentially the same."),(0,o.kt)("p",null,"Note that the following example looks different but will give you exactly the same issue:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class AlsoAliasedBundle[T <: Data](val gen: T) extends Bundle {\n                                // ^ This val makes `gen` a field, just like `foo`\n  val foo = gen\n}\n")),(0,o.kt)("p",null,"By making ",(0,o.kt)("inlineCode",{parentName:"p"},"gen")," a ",(0,o.kt)("inlineCode",{parentName:"p"},"val"),", it becomes a public field of the ",(0,o.kt)("inlineCode",{parentName:"p"},"class"),", just like ",(0,o.kt)("inlineCode",{parentName:"p"},"foo"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"getVerilogString(new Top(new AlsoAliasedBundle(UInt(8.W))))\n// chisel3.AliasedAggregateFieldException: AlsoAliasedBundle contains aliased fields named (foo,gen)\n//  at ... ()\n//  at repl.MdocSession$MdocApp17$Top$$anonfun$50$$anonfun$apply$37.apply(cookbook.md:301)\n//  at repl.MdocSession$MdocApp17$Top$$anonfun$50$$anonfun$apply$37.apply(cookbook.md:301)\n//  at chisel3.experimental.prefix$.apply(prefix.scala:50)\n//  at repl.MdocSession$MdocApp17$Top$$anonfun$50.apply(cookbook.md:301)\n//  at repl.MdocSession$MdocApp17$Top$$anonfun$50.apply(cookbook.md)\n//  at chisel3.internal.plugin.package$.autoNameRecursively(package.scala:33)\n//  at repl.MdocSession$MdocApp17$Top.<init>(cookbook.md:301)\n//  at repl.MdocSession$MdocApp17$$anonfun$57$$anonfun$apply$44.apply(cookbook.md:339)\n//  at repl.MdocSession$MdocApp17$$anonfun$57$$anonfun$apply$44.apply(cookbook.md:339)\n//  at ... ()\n//  at ... (Stack trace trimmed to user code only. Rerun with --full-stacktrace to see the full stack trace)\n")),(0,o.kt)("p",null,"There are several ways to solve this issue with their own advantages and disadvantages."),(0,o.kt)("h4",{id:"1-0-arity-function-parameters"},"1. 0-arity function parameters"),(0,o.kt)("p",null,"Instead of passing an object as a parameter, you can pass a 0-arity function (a function with no arguments):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class UsingAFunctionBundle[T <: Data](gen: () => T) extends Bundle {\n  val foo = gen()\n  val bar = gen()\n}\n")),(0,o.kt)("p",null,"Note that the type of ",(0,o.kt)("inlineCode",{parentName:"p"},"gen")," is now ",(0,o.kt)("inlineCode",{parentName:"p"},"() => T"),".\nBecause it is now a function and not a subtype of ",(0,o.kt)("inlineCode",{parentName:"p"},"Data"),", you can safely make ",(0,o.kt)("inlineCode",{parentName:"p"},"gen")," a ",(0,o.kt)("inlineCode",{parentName:"p"},"val")," without\nit becoming a hardware field of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Bundle"),"."),(0,o.kt)("p",null,"Note that this also means you must pass ",(0,o.kt)("inlineCode",{parentName:"p"},"gen")," as a function, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"getVerilogString(new Top(new UsingAFunctionBundle(() => UInt(8.W))))\n")),(0,o.kt)("a",{name:"aliased-warning"})," **Warning**: you must ensure that `gen` creates fresh objects rather than capturing an already constructed value:",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class MisusedFunctionArguments extends Module {\n  // This usage is correct\n  val in = IO(Input(new UsingAFunctionBundle(() => UInt(8.W))))\n\n  // This usage is incorrect\n  val fizz = UInt(8.W)\n  val out = IO(Output(new UsingAFunctionBundle(() => fizz)))\n}\ngetVerilogString(new MisusedFunctionArguments)\n// chisel3.AutoClonetypeException: The bundle plugin was unable to clone UsingAFunctionBundle that has field 'foo' aliased with base UsingAFunctionBundle.This likely happened because you tried nesting Data arguments inside of other data structures. Try wrapping the field(s) in Input(...), Output(...), or Flipped(...) if appropriate. As a last resort, you can call chisel3.reflect.DataMirror.internal.chiselTypeClone on any nested Data arguments. See the cookbook entry 'How do I deal with the \"unable to clone\" error?' for more details.\n//  at ... ()\n//  at repl.MdocSession$MdocApp17$$anonfun$59$MisusedFunctionArguments$1$$anonfun$62$$anonfun$apply$51$$anonfun$apply$52.apply(cookbook.md:370)\n//  at repl.MdocSession$MdocApp17$$anonfun$59$MisusedFunctionArguments$1$$anonfun$62$$anonfun$apply$51$$anonfun$apply$52.apply(cookbook.md:370)\n//  at chisel3.IO$.apply(IO.scala:29)\n//  at chisel3.experimental.BaseModule.IO(Module.scala:682)\n//  at repl.MdocSession$MdocApp17$$anonfun$59$MisusedFunctionArguments$1$$anonfun$62$$anonfun$apply$51.apply(cookbook.md:370)\n//  at repl.MdocSession$MdocApp17$$anonfun$59$MisusedFunctionArguments$1$$anonfun$62$$anonfun$apply$51.apply(cookbook.md:370)\n//  at chisel3.experimental.prefix$.apply(prefix.scala:50)\n//  at repl.MdocSession$MdocApp17$$anonfun$59$MisusedFunctionArguments$1$$anonfun$62.apply(cookbook.md:370)\n//  at repl.MdocSession$MdocApp17$$anonfun$59$MisusedFunctionArguments$1$$anonfun$62.apply(cookbook.md)\n//  at chisel3.internal.plugin.package$.autoNameRecursively(package.scala:33)\n//  at repl.MdocSession$MdocApp17$$anonfun$59$MisusedFunctionArguments$1.<init>(cookbook.md:370)\n//  at repl.MdocSession$MdocApp17$$anonfun$59$$anonfun$apply$55.apply(cookbook.md:372)\n//  at repl.MdocSession$MdocApp17$$anonfun$59$$anonfun$apply$55.apply(cookbook.md:372)\n//  at ... ()\n//  at ... (Stack trace trimmed to user code only. Rerun with --full-stacktrace to see the full stack trace)\n")),(0,o.kt)("p",null,"In the above example, value ",(0,o.kt)("inlineCode",{parentName:"p"},"fizz")," and fields ",(0,o.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bar")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"out")," are all the same object in memory."),(0,o.kt)("h4",{id:"2-by-name-function-parameters"},"2. By-name function parameters"),(0,o.kt)("p",null,"Functionally the same as (1) but with more subtle syntax, you can use ",(0,o.kt)("a",{parentName:"p",href:"https://docs.scala-lang.org/tour/by-name-parameters.html"},"Scala by-name function parameters"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class UsingByNameParameters[T <: Data](gen: => T) extends Bundle {\n  val foo = gen\n  val bar = gen\n}\n")),(0,o.kt)("p",null,"With this usage, you do not include ",(0,o.kt)("inlineCode",{parentName:"p"},"() =>")," when passing the argument:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"getVerilogString(new Top(new UsingByNameParameters(UInt(8.W))))\n")),(0,o.kt)("p",null,"Note that as this is just syntactic sugar over (1), the ",(0,o.kt)("a",{parentName:"p",href:"#aliased-warning"},"same warning applies"),"."),(0,o.kt)("h4",{id:"3-directioned-bundle-fields"},"3. Directioned Bundle fields"),(0,o.kt)("p",null,"You can alternatively wrap the fields with ",(0,o.kt)("inlineCode",{parentName:"p"},"Output(...)"),", which creates fresh instances of the passed argument.\nChisel treats ",(0,o.kt)("inlineCode",{parentName:"p"},"Output"),' as the "default direction" so if all fields are outputs, the ',(0,o.kt)("inlineCode",{parentName:"p"},"Bundle")," is functionally equivalent to a ",(0,o.kt)("inlineCode",{parentName:"p"},"Bundle")," with no directioned fields."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class DirectionedBundle[T <: Data](gen: T) extends Bundle {\n  val foo = Output(gen)\n  val bar = Output(gen)\n}\n")),(0,o.kt)("p",null,"This approach is admittedly a little ugly and may mislead others reading the code because it implies that this Bundle is intended to be used as an ",(0,o.kt)("inlineCode",{parentName:"p"},"Output"),"."),(0,o.kt)("h4",{id:"4-call-clonetype-directly"},"4. Call ",(0,o.kt)("inlineCode",{parentName:"h4"},".cloneType")," directly"),(0,o.kt)("p",null,"You can also just call ",(0,o.kt)("inlineCode",{parentName:"p"},".cloneType")," on your ",(0,o.kt)("inlineCode",{parentName:"p"},"gen")," argument directly.\nWhile we try to hide this implementation detail from the user, ",(0,o.kt)("inlineCode",{parentName:"p"},".cloneType")," is the mechanism by which Chisel creates fresh instances of ",(0,o.kt)("inlineCode",{parentName:"p"},"Data")," objects:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class UsingCloneTypeBundle[T <: Data](gen: T) extends Bundle {\n  val foo = gen.cloneType\n  val bar = gen.cloneType\n}\n")),(0,o.kt)("h3",{id:"-how-do-i-deal-with-the-unable-to-clone-error"},(0,o.kt)("a",{name:"bundle-unable-to-clone"}),' How do I deal with the "unable to clone" error?'),(0,o.kt)("p",null,'Most Chisel objects need to be cloned in order to differentiate between the\nsoftware representation of the bundle field from its "bound" hardware\nrepresentation, where "binding" is the process of generating a hardware\ncomponent. For Bundle fields, this cloning is supposed to happen automatically\nwith a compiler plugin.'),(0,o.kt)("p",null,"In some cases though, the plugin may not be able to clone the Bundle fields. The\nmost common case for when this happens is when the ",(0,o.kt)("inlineCode",{parentName:"p"},"chisel3.Data")," part of the\nBundle field is nested inside some other data structure and the compiler plugin\nis unable to figure out how to clone the entire structure. It is best to avoid\nsuch nested structures."),(0,o.kt)("p",null,"There are a few ways around this issue - you can try wrapping the problematic\nfields in Input(...), Output(...), or Flipped(...) if appropriate. You can also\ntry manually cloning each field in the Bundle using the ",(0,o.kt)("inlineCode",{parentName:"p"},"chiselTypeClone")," method\nin ",(0,o.kt)("inlineCode",{parentName:"p"},"chisel3.reflect.DataMirror"),". Here's an example with the Bundle whose fields\nwon't get cloned:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'class CustomBundleBroken(elts: (String, Data)*) extends Record {\n  val elements = ListMap(elts: _*)\n\n  def apply(elt: String): Data = elements(elt)\n}\n\nclass NewModule extends Module {\n  val out = Output(UInt(8.W))\n  val recordType = new CustomBundleBroken("fizz" -> UInt(16.W), "buzz" -> UInt(16.W))\n  val record = Wire(recordType)\n  val uint = record.asUInt\n  val record2 = uint.asTypeOf(recordType)\n  out := record\n}\ngetVerilogString(new NewModule)\n// chisel3.AutoClonetypeException: The bundle plugin was unable to clone CustomBundleBroken$1 that has field \'fizz\' aliased with base CustomBundleBroken$1.This likely happened because you tried nesting Data arguments inside of other data structures. Try wrapping the field(s) in Input(...), Output(...), or Flipped(...) if appropriate. As a last resort, you can call chisel3.reflect.DataMirror.internal.chiselTypeClone on any nested Data arguments. See the cookbook entry \'How do I deal with the "unable to clone" error?\' for more details.\n//  at ... ()\n//  at repl.MdocSession$MdocApp17$$anonfun$70$NewModule$1$$anonfun$74$$anonfun$apply$63.apply(cookbook.md:444)\n//  at repl.MdocSession$MdocApp17$$anonfun$70$NewModule$1$$anonfun$74$$anonfun$apply$63.apply(cookbook.md:444)\n//  at chisel3.experimental.prefix$.apply(prefix.scala:50)\n//  at repl.MdocSession$MdocApp17$$anonfun$70$NewModule$1$$anonfun$74.apply(cookbook.md:444)\n//  at repl.MdocSession$MdocApp17$$anonfun$70$NewModule$1$$anonfun$74.apply(cookbook.md)\n//  at chisel3.internal.plugin.package$.autoNameRecursively(package.scala:33)\n//  at repl.MdocSession$MdocApp17$$anonfun$70$NewModule$1.<init>(cookbook.md:444)\n//  at repl.MdocSession$MdocApp17$$anonfun$70$$anonfun$apply$67.apply(cookbook.md:449)\n//  at repl.MdocSession$MdocApp17$$anonfun$70$$anonfun$apply$67.apply(cookbook.md:449)\n//  at ... ()\n//  at ... (Stack trace trimmed to user code only. Rerun with --full-stacktrace to see the full stack trace)\n')),(0,o.kt)("p",null,"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"chiselTypeClone")," to clone the elements as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3.reflect.DataMirror\nimport chisel3.experimental.requireIsChiselType\n\nclass CustomBundleFixed(elts: (String, Data)*) extends Record {\n  val elements = ListMap(elts.map {\n    case (field, elt) =>\n      requireIsChiselType(elt)\n      field -> DataMirror.internal.chiselTypeClone(elt)\n  }: _*)\n\n  def apply(elt: String): Data = elements(elt)\n}\n")),(0,o.kt)("h3",{id:"how-do-i-create-a-finite-state-machine-fsm"},"How do I create a finite state machine (FSM)?"),(0,o.kt)("p",null,"The advised way is to use ",(0,o.kt)("inlineCode",{parentName:"p"},"ChiselEnum")," to construct enumerated types representing the state of the FSM.\nState transitions are then handled with ",(0,o.kt)("inlineCode",{parentName:"p"},"switch"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"is")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"when"),"/",(0,o.kt)("inlineCode",{parentName:"p"},".elsewhen"),"/",(0,o.kt)("inlineCode",{parentName:"p"},".otherwise"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\nimport chisel3.util.{switch, is}\n\nobject DetectTwoOnes {\n  object State extends ChiselEnum {\n    val sNone, sOne1, sTwo1s = Value\n  }\n}\n\n/* This FSM detects two 1's one after the other */\nclass DetectTwoOnes extends Module {\n  import DetectTwoOnes.State\n  import DetectTwoOnes.State._\n\n  val io = IO(new Bundle {\n    val in = Input(Bool())\n    val out = Output(Bool())\n    val state = Output(State())\n  })\n\n  val state = RegInit(sNone)\n\n  io.out := (state === sTwo1s)\n  io.state := state\n\n  switch (state) {\n    is (sNone) {\n      when (io.in) {\n        state := sOne1\n      }\n    }\n    is (sOne1) {\n      when (io.in) {\n        state := sTwo1s\n      } .otherwise {\n        state := sNone\n      }\n    }\n    is (sTwo1s) {\n      when (!io.in) {\n        state := sNone\n      }\n    }\n  }\n}\n")),(0,o.kt)("p",null,"Note: the ",(0,o.kt)("inlineCode",{parentName:"p"},"is")," statement can take multiple conditions e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"is (sTwo1s, sOne1) { ... }"),"."),(0,o.kt)("h3",{id:"how-do-i-unpack-a-value-reverse-concatenation-like-in-verilog"},'How do I unpack a value ("reverse concatenation") like in Verilog?'),(0,o.kt)("p",null,"In Verilog, you can do something like the following which will unpack a the value ",(0,o.kt)("inlineCode",{parentName:"p"},"z"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-verilog"},"wire [1:0] a;\nwire [3:0] b;\nwire [2:0] c;\nwire [8:0] z = [...];\nassign {a,b,c} = z;\n")),(0,o.kt)("p",null,"Unpacking often corresponds to reinterpreting an unstructured data type as a structured data type.\nFrequently, this structured type is used prolifically in the design, and has been declared as in the following example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\n\nclass MyBundle extends Bundle {\n  val a = UInt(2.W)\n  val b = UInt(4.W)\n  val c = UInt(3.W)\n}\n")),(0,o.kt)("p",null,"The easiest way to accomplish this in Chisel would be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'class Foo extends Module {\n  val z = Wire(UInt(9.W))\n  z := DontCare // This is a dummy connection\n  val unpacked = z.asTypeOf(new MyBundle)\n  printf("%d", unpacked.a)\n  printf("%d", unpacked.b)\n  printf("%d", unpacked.c)\n}\n')),(0,o.kt)("p",null,"If you ",(0,o.kt)("strong",{parentName:"p"},"really")," need to do this for a one-off case (Think thrice! It is likely you can better structure the code using bundles), then rocket-chip has a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/freechipsproject/rocket-chip/blob/723af5e6b69e07b5f94c46269a208a8d65e9d73b/src/main/scala/util/Misc.scala#L140"},"Split utility")," which can accomplish this."),(0,o.kt)("h3",{id:"how-do-i-do-subword-assignment-assign-to-some-bits-in-a-uint"},"How do I do subword assignment (assign to some bits in a UInt)?"),(0,o.kt)("p",null,"You may try to do something like the following where you want to assign only some bits of a Chisel type.\nBelow, the left-hand side connection to ",(0,o.kt)("inlineCode",{parentName:"p"},"io.out(0)")," is not allowed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\nimport circt.stage.ChiselStage\n\nclass Foo extends Module {\n  val io = IO(new Bundle {\n    val bit = Input(Bool())\n    val out = Output(UInt(10.W))\n  })\n  io.out(0) := io.bit\n}\n")),(0,o.kt)("p",null,"If you try to compile this, you will get an error."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"getVerilogString(new Foo)\n// chisel3.package$ChiselException: Cannot reassign to read-only Foo.?: OpResult[Bool]\n//  at ... ()\n//  at repl.MdocSession$MdocApp26$Foo.<init>(cookbook.md:589)\n//  at repl.MdocSession$MdocApp26$$anonfun$104$$anonfun$apply$90.apply(cookbook.md:597)\n//  at repl.MdocSession$MdocApp26$$anonfun$104$$anonfun$apply$90.apply(cookbook.md:597)\n//  at ... ()\n//  at ... (Stack trace trimmed to user code only. Rerun with --full-stacktrace to see the full stack trace)\n")),(0,o.kt)("p",null,"Chisel3 ",(0,o.kt)("em",{parentName:"p"},"does not support subword assignment"),".\nThe reason for this is that subword assignment generally hints at a better abstraction with an aggregate/structured types, i.e., a ",(0,o.kt)("inlineCode",{parentName:"p"},"Bundle")," or a ",(0,o.kt)("inlineCode",{parentName:"p"},"Vec"),"."),(0,o.kt)("p",null,"If you must express it this way, one approach is to blast your ",(0,o.kt)("inlineCode",{parentName:"p"},"UInt")," to a ",(0,o.kt)("inlineCode",{parentName:"p"},"Vec")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"Bool")," and back:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\n\nclass Foo extends Module {\n  val io = IO(new Bundle {\n    val in = Input(UInt(10.W))\n    val bit = Input(Bool())\n    val out = Output(UInt(10.W))\n  })\n  val bools = VecInit(io.in.asBools)\n  bools(0) := io.bit\n  io.out := bools.asUInt\n}\n")),(0,o.kt)("h3",{id:"how-do-i-create-an-optional-io"},"How do I create an optional I/O?"),(0,o.kt)("p",null,"The following example is a module which includes the optional port ",(0,o.kt)("inlineCode",{parentName:"p"},"out2")," only if the given parameter is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\n\nclass ModuleWithOptionalIOs(flag: Boolean) extends Module {\n  val io = IO(new Bundle {\n    val in = Input(UInt(12.W))\n    val out = Output(UInt(12.W))\n    val out2 = if (flag) Some(Output(UInt(12.W))) else None\n  })\n\n  io.out := io.in\n  if (flag) {\n    io.out2.get := io.in\n  }\n}\n")),(0,o.kt)("p",null,"The following is an example where an entire ",(0,o.kt)("inlineCode",{parentName:"p"},"IO")," is optional:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\n\nclass ModuleWithOptionalIO(flag: Boolean) extends Module {\n  val in = if (flag) Some(IO(Input(Bool()))) else None\n  val out = IO(Output(Bool()))\n\n  out := in.getOrElse(false.B)\n}\n")),(0,o.kt)("h3",{id:"how-do-i-create-io-without-a-prefix"},"How do I create I/O without a prefix?"),(0,o.kt)("p",null,"In most cases, you can simply call ",(0,o.kt)("inlineCode",{parentName:"p"},"IO")," multiple times:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\n\nclass MyModule extends Module {\n  val in = IO(Input(UInt(8.W)))\n  val out = IO(Output(UInt(8.W)))\n\n  out := in +% 1.U\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-verilog"},"// Generated by CIRCT firtool-1.56.0\nmodule MyModule(    // <stdin>:3:3\n  input        clock,   // <stdin>:4:11\n               reset,   // <stdin>:5:11\n  input  [7:0] in,  // cookbook.md:692:14\n  output [7:0] out  // cookbook.md:693:15\n);\n\n  assign out = in + 8'h1;   // <stdin>:3:3, cookbook.md:695:13\nendmodule\n\n")),(0,o.kt)("p",null,"If you have a ",(0,o.kt)("inlineCode",{parentName:"p"},"Bundle")," from which you would like to create ports without the\nnormal ",(0,o.kt)("inlineCode",{parentName:"p"},"val")," prefix, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatIO"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\nimport chisel3.experimental.FlatIO\n\nclass MyBundle extends Bundle {\n  val foo = Input(UInt(8.W))\n  val bar = Output(UInt(8.W))\n}\n\nclass MyModule extends Module {\n  val io = FlatIO(new MyBundle)\n\n  io.bar := io.foo +% 1.U\n}\n")),(0,o.kt)("p",null,"Note that ",(0,o.kt)("inlineCode",{parentName:"p"},"io_")," is nowhere to be seen!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-verilog"},"// Generated by CIRCT firtool-1.56.0\nmodule MyModule(    // <stdin>:3:3\n  input        clock,   // <stdin>:4:11\n               reset,   // <stdin>:5:11\n  input  [7:0] foo, // cookbook.md:724:18\n  output [7:0] bar  // cookbook.md:724:18\n);\n\n  assign bar = foo + 8'h1;  // <stdin>:3:3, cookbook.md:726:20\nendmodule\n\n")),(0,o.kt)("h3",{id:"how-do-i-minimize-the-number-of-bits-used-in-an-output-vector"},"How do I minimize the number of bits used in an output vector?"),(0,o.kt)("p",null,"Use inferred width and a ",(0,o.kt)("inlineCode",{parentName:"p"},"Seq")," instead of a ",(0,o.kt)("inlineCode",{parentName:"p"},"Vec"),":"),(0,o.kt)("p",null,"Consider:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\n\n// Count the number of set bits up to and including each bit position\nclass CountBits(width: Int) extends Module {\n  val bits = IO(Input(UInt(width.W)))\n  val countSequence = Seq.tabulate(width)(i => IO(Output(UInt())))\n  val countVector = IO(Output(Vec(width, UInt())))\n  countSequence.zipWithIndex.foreach { case (port, i) =>\n    port := util.PopCount(bits(i, 0))\n  }\n  countVector := countSequence\n}\n")),(0,o.kt)("p",null,"Unlike ",(0,o.kt)("inlineCode",{parentName:"p"},"Vecs")," which represent a singular Chisel type and must have the same width for every element,\n",(0,o.kt)("inlineCode",{parentName:"p"},"Seq")," is a purely Scala construct, so their elements are independent from the perspective of Chisel and can have different widths."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-verilog"},"// Generated by CIRCT firtool-1.56.0\nmodule CountBits(   // <stdin>:3:3\n  input        clock,   // <stdin>:4:11\n               reset,   // <stdin>:5:11\n  input  [3:0] bits,    // cookbook.md:746:16\n  output       countSequence_0, // cookbook.md:747:50\n  output [1:0] countSequence_1, // cookbook.md:747:50\n               countSequence_2, // cookbook.md:747:50\n  output [2:0] countSequence_3, // cookbook.md:747:50\n               countVector_0,   // cookbook.md:748:23\n               countVector_1,   // cookbook.md:748:23\n               countVector_2,   // cookbook.md:748:23\n               countVector_3    // cookbook.md:748:23\n);\n")),(0,o.kt)("h3",{id:"-how-do-i-resolve-dynamic-index--is-too-widenarrow-for-extractee-"},(0,o.kt)("a",{id:"dynamic-index-too-wide-narrow"}),' How do I resolve "Dynamic index ... is too wide/narrow for extractee ..."?'),(0,o.kt)("p",null,'Chisel will warn if a dynamic index is not the correctly-sized width for indexing a Vec or UInt.\n"Correctly-sized" means that the width of the index should be the log2 of the size of the indexee.\nIf the indexee is a non-power-of-2 size, use the ceiling of the log2 result.'),(0,o.kt)("p",null,"When the index does not have enough bits to address all entries or bits in the extractee, you can ",(0,o.kt)("inlineCode",{parentName:"p"},".pad")," the index to increase the width."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class TooNarrow extends RawModule {\n  val extractee = Wire(UInt(7.W))\n  val index = Wire(UInt(2.W))\n  extractee(index)\n}\ncompile(new TooNarrow)\n// [\x1b[33mwarn\x1b[0m] cookbook.md 788:12: [W003] Dynamic index with width 2 is too small for extractee of width 7\n// [\x1b[33mwarn\x1b[0m] There were \x1b[33m1 warning(s)\x1b[0m during hardware elaboration.\n")),(0,o.kt)("p",null,"This can be fixed with ",(0,o.kt)("inlineCode",{parentName:"p"},"pad"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class TooNarrowFixed extends RawModule {\n  val extractee = Wire(UInt(7.W))\n  val index = Wire(UInt(2.W))\n  extractee(index.pad(3))\n}\ncompile(new TooNarrowFixed)\n")),(0,o.kt)("h4",{id:"use-bit-extraction-when-the-index-is-too-wide"},"Use bit extraction when the index is too wide"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class TooWide extends RawModule {\n  val extractee = Wire(Vec(8, UInt(32.W)))\n  val index = Wire(UInt(4.W))\n  extractee(index)\n}\ncompile(new TooWide)\n// [\x1b[33mwarn\x1b[0m] cookbook.md 814:12: [W004] Dynamic index with width 4 is too wide for Vec of size 8 (expected index width 3).\n// [\x1b[33mwarn\x1b[0m] There were \x1b[33m1 warning(s)\x1b[0m during hardware elaboration.\n")),(0,o.kt)("p",null,"This can be fixed with bit extraction:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class TooWideFixed extends RawModule {\n  val extractee = Wire(Vec(8, UInt(32.W)))\n  val index = Wire(UInt(4.W))\n  extractee(index(2, 0))\n}\ncompile(new TooWideFixed)\n")),(0,o.kt)("p",null,"Note that size 1 ",(0,o.kt)("inlineCode",{parentName:"p"},"Vecs")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"UInts")," should be indexed by a zero-width ",(0,o.kt)("inlineCode",{parentName:"p"},"UInt"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class SizeOneVec extends RawModule {\n  val extractee = Wire(Vec(1, UInt(32.W)))\n  val index = Wire(UInt(0.W))\n  extractee(index)\n}\ncompile(new SizeOneVec)\n")),(0,o.kt)("p",null,"Because ",(0,o.kt)("inlineCode",{parentName:"p"},"pad")," only pads if the desired width is less than the current width of the argument,\nyou can use ",(0,o.kt)("inlineCode",{parentName:"p"},"pad")," in conjunction with bit extraction when the widths may be too wide or too\nnarrow under different circumstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3.util.log2Ceil\nclass TooWideOrNarrow(extracteeSize: Int, indexWidth: Int) extends Module {\n  val extractee = Wire(Vec(extracteeSize, UInt(8.W)))\n  val index = Wire(UInt(indexWidth.W))\n  val correctWidth = log2Ceil(extracteeSize)\n  extractee(index.pad(correctWidth)(correctWidth - 1, 0))\n}\ncompile(new TooWideOrNarrow(8, 2))\ncompile(new TooWideOrNarrow(8, 4))\n")),(0,o.kt)("p",null,"Another option for dynamic bit selection of ",(0,o.kt)("inlineCode",{parentName:"p"},"UInts")," (but not ",(0,o.kt)("inlineCode",{parentName:"p"},"Vec")," dynamic indexing) is to do a dynamic\nright shift of the extractee by the index and then just bit select a single bit:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"class TooWideOrNarrowUInt(extracteeSize: Int, indexWidth: Int) extends Module {\n  val extractee = Wire(UInt(extracteeSize.W))\n  val index = Wire(UInt(indexWidth.W))\n  (extractee >> index)(0)\n}\ncompile(new TooWideOrNarrowUInt(8, 2))\ncompile(new TooWideOrNarrowUInt(8, 4))\n")),(0,o.kt)("h2",{id:"predictable-naming"},"Predictable Naming"),(0,o.kt)("h3",{id:"how-do-i-get-chisel-to-name-signals-properly-in-blocks-like-whenwithclockandreset"},"How do I get Chisel to name signals properly in blocks like when/withClockAndReset?"),(0,o.kt)("p",null,"Use the compiler plugin, and check out the ",(0,o.kt)("a",{parentName:"p",href:"naming"},"Naming Cookbook")," if that still does not do what you want."),(0,o.kt)("h3",{id:"how-do-i-get-chisel-to-name-the-results-of-vector-reads-properly"},"How do I get Chisel to name the results of vector reads properly?"),(0,o.kt)("p",null,"Currently, name information is lost when using dynamic indexing. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\n\nclass Foo extends Module {\n  val io = IO(new Bundle {\n    val in = Input(Vec(4, Bool()))\n    val idx = Input(UInt(2.W))\n    val en = Input(Bool())\n    val out = Output(Bool())\n  })\n\n  val x = io.in(io.idx)\n  val y = x && io.en\n  io.out := y\n}\n")),(0,o.kt)("p",null,"The above code loses the ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," name, instead using ",(0,o.kt)("inlineCode",{parentName:"p"},"_GEN_3")," (the other ",(0,o.kt)("inlineCode",{parentName:"p"},"_GEN_*")," signals are expected)."),(0,o.kt)("p",null,"{% raw %}"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-verilog"},"// Generated by CIRCT firtool-1.56.0\nmodule Foo( // <stdin>:3:3\n  input        clock,   // <stdin>:4:11\n               reset,   // <stdin>:5:11\n               io_in_0, // cookbook.md:893:14\n               io_in_1, // cookbook.md:893:14\n               io_in_2, // cookbook.md:893:14\n               io_in_3, // cookbook.md:893:14\n  input  [1:0] io_idx,  // cookbook.md:893:14\n  input        io_en,   // cookbook.md:893:14\n  output       io_out   // cookbook.md:893:14\n);\n\n  wire [3:0] _GEN = {{io_in_3}, {io_in_2}, {io_in_1}, {io_in_0}};   // cookbook.md:901:13\n  assign io_out = _GEN[io_idx] & io_en; // <stdin>:3:3, cookbook.md:901:13\nendmodule\n\n")),(0,o.kt)("p",null,"{% endraw %}"),(0,o.kt)("p",null,"This can be worked around by creating a wire and connecting the dynamic index to the wire:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"val x = WireInit(io.in(io.idx))\n")),(0,o.kt)("p",null,"Which produces:\n{% raw %}"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-verilog"},"// Generated by CIRCT firtool-1.56.0\nmodule Foo2(    // <stdin>:3:3\n  input        clock,   // <stdin>:4:11\n               reset,   // <stdin>:5:11\n               io_in_0, // cookbook.md:916:14\n               io_in_1, // cookbook.md:916:14\n               io_in_2, // cookbook.md:916:14\n               io_in_3, // cookbook.md:916:14\n  input  [1:0] io_idx,  // cookbook.md:916:14\n  input        io_en,   // cookbook.md:916:14\n  output       io_out   // cookbook.md:916:14\n);\n\n  wire [3:0] _GEN = {{io_in_3}, {io_in_2}, {io_in_1}, {io_in_0}};   // cookbook.md:923:19\n  assign io_out = _GEN[io_idx] & io_en; // <stdin>:3:3, cookbook.md:923:19, :924:13\nendmodule\n\n")),(0,o.kt)("p",null,"{% endraw %}"),(0,o.kt)("h3",{id:"how-can-i-dynamically-setparametrize-the-name-of-a-module"},"How can I dynamically set/parametrize the name of a module?"),(0,o.kt)("p",null,"You can override the ",(0,o.kt)("inlineCode",{parentName:"p"},"desiredName")," function. This works with normal Chisel modules and ",(0,o.kt)("inlineCode",{parentName:"p"},"BlackBox"),"es. Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import chisel3._\n\nclass Coffee extends BlackBox {\n    val io = IO(new Bundle {\n        val I = Input(UInt(32.W))\n        val O = Output(UInt(32.W))\n    })\n    override def desiredName = "Tea"\n}\n\nclass Salt extends Module {\n    val io = IO(new Bundle {})\n    val drink = Module(new Coffee)\n    override def desiredName = "SodiumMonochloride"\n\n    drink.io.I := 42.U\n}\n')),(0,o.kt)("p",null,"Elaborating the Chisel module ",(0,o.kt)("inlineCode",{parentName:"p"},"Salt"),' yields our "desired names" for ',(0,o.kt)("inlineCode",{parentName:"p"},"Salt")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Coffee")," in the output Verilog:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-verilog"},"// Generated by CIRCT firtool-1.56.0\n// external module Tea\n\nmodule SodiumMonochloride(  // <stdin>:8:3\n  input clock,  // <stdin>:9:11\n        reset   // <stdin>:10:11\n);\n\n  Tea drink (   // cookbook.md:955:23\n    .I (32'h2A),    // cookbook.md:958:16\n    .O (/* unused */)\n  );\nendmodule\n\n")),(0,o.kt)("h2",{id:"directionality"},"Directionality"),(0,o.kt)("h3",{id:"how-do-i-strip-directions-from-a-bidirectional-bundle-or-other-data"},"How do I strip directions from a bidirectional Bundle (or other Data)?"),(0,o.kt)("p",null,"Given a bidirectional port like a ",(0,o.kt)("inlineCode",{parentName:"p"},"Decoupled"),", you will get an error if you try to connect it directly\nto a register:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\nimport circt.stage.ChiselStage\nimport chisel3.util.Decoupled\nclass BadRegConnect extends Module {\n  val io = IO(new Bundle {\n    val enq = Decoupled(UInt(8.W))\n  })\n\n  val monitor = Reg(chiselTypeOf(io.enq))\n  monitor := io.enq\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"ChiselStage.emitSystemVerilog(new BadRegConnect)\n// circt.stage.phases.Exceptions$FirtoolNonZeroExitCode: firtool returned a non-zero exit code. Note that this version of Chisel (6.0.0-M3+61-65a96084+20231007-1616-SNAPSHOT) was published against firtool version 1.56.0.\n// ------------------------------------------------------------------------------\n// ExitCode:\n// 1\n// STDOUT:\n// \n// STDERR:\n// cookbook.md:988:20: error: 'firrtl.reg' op result #0 must be a passive non-'const' base type that does not contain analog, but got '!firrtl.bundle<ready flip: uint<1>, valid: uint<1>, bits: uint<8>>'\n// cookbook.md:988:20: note: see current operation: %4 = \"firrtl.reg\"(%arg0) {annotations = [], name = \"monitor\", nameKind = #firrtl<name_kind interesting_name>} : (!firrtl.clock) -> !firrtl.bundle<ready flip: uint<1>, valid: uint<1>, bits: uint<8>>\n// \n// ------------------------------------------------------------------------------\n")),(0,o.kt)("p",null,'While there is no construct to "strip direction" in Chisel3, wrapping a type in ',(0,o.kt)("inlineCode",{parentName:"p"},"Output(...)"),"\n(the default direction in Chisel3) will\nset all of the individual elements to output direction.\nThis will have the desired result when used to construct a Register:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\nimport circt.stage.ChiselStage\nimport chisel3.util.Decoupled\nclass CoercedRegConnect extends Module {\n  val io = IO(new Bundle {\n    val enq = Flipped(Decoupled(UInt(8.W)))\n  })\n\n  // Make a Reg which contains all of the bundle's signals, regardless of their directionality\n  val monitor = Reg(Output(chiselTypeOf(io.enq)))\n  // Even though io.enq is bidirectional, := will drive all fields of monitor with the fields of io.enq\n  monitor := io.enq\n}\n")))}u.isMDXComponent=!0}}]);
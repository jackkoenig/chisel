"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[4862],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3058:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={layout:"docs",title:"Motivation",section:"chisel3"},o='Motivation -- "Why Chisel?"',s={unversionedId:"explanations/motivation",id:"explanations/motivation",title:"Motivation",description:"We were motivated to develop a new hardware language by years of",source:"@site/docs/explanations/motivation.md",sourceDirName:"explanations",slug:"/explanations/motivation",permalink:"/chisel/docs/explanations/motivation",draft:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/explanations/motivation.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Motivation",section:"chisel3"},sidebar:"tutorialSidebar",previous:{title:"Modules",permalink:"/chisel/docs/explanations/modules"},next:{title:"Multiple Clock Domains",permalink:"/chisel/docs/explanations/multi-clock"}},c={},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"motivation----why-chisel"},'Motivation -- "Why Chisel?"'),(0,a.kt)("p",null,"We were motivated to develop a new hardware language by years of\nstruggle with existing hardware description languages in our research\nprojects and hardware design courses.  ",(0,a.kt)("em",{parentName:"p"},"Verilog")," and ",(0,a.kt)("em",{parentName:"p"},"VHDL")," were developed\nas hardware ",(0,a.kt)("em",{parentName:"p"},"simulation")," languages, and only later did they become\na basis for hardware ",(0,a.kt)("em",{parentName:"p"},"synthesis"),".  Much of the semantics of these\nlanguages are not appropriate for hardware synthesis and, in fact,\nmany constructs are simply not synthesizable.  Other constructs are\nnon-intuitive in how they map to hardware implementations, or their\nuse can accidentally lead to highly inefficient hardware structures.\nWhile it is possible to use a subset of these languages and still get\nacceptable results, they nonetheless present a cluttered and confusing\nspecification model, particularly in an instructional setting."),(0,a.kt)("p",null,"However, our strongest motivation for developing a new hardware\nlanguage is our desire to change the way that electronic system design\ntakes place.  We believe that it is important to not only teach\nstudents how to design circuits, but also to teach them how to design\n",(0,a.kt)("em",{parentName:"p"},"circuit generators")," ---programs that automatically generate\ndesigns from a high-level set of design parameters and constraints.\nThrough circuit generators, we hope to leverage the hard work of\ndesign experts and raise the level of design abstraction for everyone.\nTo express flexible and scalable circuit construction, circuit\ngenerators must employ sophisticated programming techniques to make\ndecisions concerning how to best customize their output circuits\naccording to high-level parameter values and constraints.  While\nVerilog and VHDL include some primitive constructs for programmatic\ncircuit generation, they lack the powerful facilities present in\nmodern programming languages, such as object-oriented programming,\ntype inference, support for functional programming, and reflection."),(0,a.kt)("p",null,"Instead of building a new hardware design language from scratch, we\nchose to embed hardware construction primitives within an existing\nlanguage.  We picked Scala not only because it includes the\nprogramming features we feel are important for building circuit\ngenerators, but because it was specifically developed as a base for\ndomain-specific languages."))}d.isMDXComponent=!0}}]);
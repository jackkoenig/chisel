"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"An Introduction to Chisel","href":"/chisel/docs/introduction","docId":"introduction"},{"type":"category","label":"Cookbooks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"General Cookbook","href":"/chisel/docs/cookbooks/cookbook","docId":"cookbooks/cookbook"},{"type":"link","label":"DataView Cookbook","href":"/chisel/docs/cookbooks/dataview","docId":"cookbooks/dataview"},{"type":"link","label":"Hierarchy Cookbook","href":"/chisel/docs/cookbooks/hierarchy","docId":"cookbooks/hierarchy"},{"type":"link","label":"Naming Cookbook","href":"/chisel/docs/cookbooks/naming","docId":"cookbooks/naming"},{"type":"link","label":"Serialization Cookbook","href":"/chisel/docs/cookbooks/serialization","docId":"cookbooks/serialization"},{"type":"link","label":"Troubleshooting","href":"/chisel/docs/cookbooks/troubleshooting","docId":"cookbooks/troubleshooting"}],"href":"/chisel/docs/cookbooks/"},{"type":"category","label":"Explanations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Annotations","href":"/chisel/docs/explanations/annotations","docId":"explanations/annotations"},{"type":"link","label":"Blackboxes","href":"/chisel/docs/explanations/blackboxes","docId":"explanations/blackboxes"},{"type":"link","label":"Bundles and Vecs","href":"/chisel/docs/explanations/bundles-and-vecs","docId":"explanations/bundles-and-vecs"},{"type":"link","label":"Enumerations","href":"/chisel/docs/explanations/chisel-enum","docId":"explanations/chisel-enum"},{"type":"link","label":"Chisel Type vs Scala Type","href":"/chisel/docs/explanations/chisel-type-vs-scala-type","docId":"explanations/chisel-type-vs-scala-type"},{"type":"link","label":"Combinational Circuits","href":"/chisel/docs/explanations/combinational-circuits","docId":"explanations/combinational-circuits"},{"type":"link","label":"Connectable Operators","href":"/chisel/docs/explanations/connectable","docId":"explanations/connectable"},{"type":"link","label":"Deep Dive into <> and := Connection Operators","href":"/chisel/docs/explanations/connection-operators","docId":"explanations/connection-operators"},{"type":"link","label":"Chisel Data Types","href":"/chisel/docs/explanations/data-types","docId":"explanations/data-types"},{"type":"link","label":"DataView","href":"/chisel/docs/explanations/dataview","docId":"explanations/dataview"},{"type":"link","label":"Decoders","href":"/chisel/docs/explanations/decoder","docId":"explanations/decoder"},{"type":"link","label":"Functional Abstraction","href":"/chisel/docs/explanations/functional-abstraction","docId":"explanations/functional-abstraction"},{"type":"link","label":"Functional Module Creation","href":"/chisel/docs/explanations/functional-module-creation","docId":"explanations/functional-module-creation"},{"type":"link","label":"Interfaces and Connections","href":"/chisel/docs/explanations/interfaces-and-connections","docId":"explanations/interfaces-and-connections"},{"type":"link","label":"Intrinsics","href":"/chisel/docs/explanations/intrinsics","docId":"explanations/intrinsics"},{"type":"link","label":"Memories","href":"/chisel/docs/explanations/memories","docId":"explanations/memories"},{"type":"link","label":"Modules","href":"/chisel/docs/explanations/modules","docId":"explanations/modules"},{"type":"link","label":"Motivation","href":"/chisel/docs/explanations/motivation","docId":"explanations/motivation"},{"type":"link","label":"Multiple Clock Domains","href":"/chisel/docs/explanations/multi-clock","docId":"explanations/multi-clock"},{"type":"link","label":"Muxes and Input Selection","href":"/chisel/docs/explanations/muxes-and-input-selection","docId":"explanations/muxes-and-input-selection"},{"type":"link","label":"Naming","href":"/chisel/docs/explanations/naming","docId":"explanations/naming"},{"type":"link","label":"Operators","href":"/chisel/docs/explanations/operators","docId":"explanations/operators"},{"type":"link","label":"Polymorphism and Parameterization","href":"/chisel/docs/explanations/polymorphism-and-parameterization","docId":"explanations/polymorphism-and-parameterization"},{"type":"link","label":"Ports","href":"/chisel/docs/explanations/ports","docId":"explanations/ports"},{"type":"link","label":"Printing","href":"/chisel/docs/explanations/printing","docId":"explanations/printing"},{"type":"link","label":"Properties","href":"/chisel/docs/explanations/properties","docId":"explanations/properties"},{"type":"link","label":"Reset","href":"/chisel/docs/explanations/reset","docId":"explanations/reset"},{"type":"link","label":"Sequential Circuits","href":"/chisel/docs/explanations/sequential-circuits","docId":"explanations/sequential-circuits"},{"type":"link","label":"Source Locators","href":"/chisel/docs/explanations/source-locators","docId":"explanations/source-locators"},{"type":"link","label":"Supported Hardware","href":"/chisel/docs/explanations/supported-hardware","docId":"explanations/supported-hardware"},{"type":"link","label":"Unconnected Wires","href":"/chisel/docs/explanations/unconnected-wires","docId":"explanations/unconnected-wires"},{"type":"link","label":"Warnings","href":"/chisel/docs/explanations/warnings","docId":"explanations/warnings"},{"type":"link","label":"Width Inference","href":"/chisel/docs/explanations/width-inference","docId":"explanations/width-inference"}],"href":"/chisel/docs/explanations/"},{"type":"category","label":"Appendix","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Experimental Features","href":"/chisel/docs/appendix/experimental-features","docId":"appendix/experimental-features"},{"type":"link","label":"Upgrading From Chisel 3.4 to 3.5","href":"/chisel/docs/appendix/upgrading-from-chisel-3-4","docId":"appendix/upgrading-from-chisel-3-4"},{"type":"link","label":"Upgrading From Scala 2.11","href":"/chisel/docs/appendix/upgrading-from-scala-2-11","docId":"appendix/upgrading-from-scala-2-11"},{"type":"link","label":"Versioning","href":"/chisel/docs/appendix/versioning","docId":"appendix/versioning"}],"href":"/chisel/docs/appendix/"},{"type":"category","label":"Developer Documentation","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Developers","href":"/chisel/docs/developers/sbt-subproject","docId":"developers/sbt-subproject"},{"type":"link","label":"Scaladoc","href":"/chisel/docs/developers/scaladoc","docId":"developers/scaladoc"},{"type":"link","label":"Style Guide","href":"/chisel/docs/developers/style","docId":"developers/style"},{"type":"link","label":"Test Coverage","href":"/chisel/docs/developers/test-coverage","docId":"developers/test-coverage"}],"href":"/chisel/docs/developers/"},{"type":"category","label":"Resources and References","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Frequently Asked Questions","href":"/chisel/docs/resources/faqs","docId":"resources/faqs"}],"href":"/chisel/docs/resources/"}]},"docs":{"appendix/appendix":{"id":"appendix/appendix","title":"Appendix","description":"This section covers some less-common Chisel topics.","sidebar":"tutorialSidebar"},"appendix/experimental-features":{"id":"appendix/experimental-features","title":"Experimental Features","description":"Chisel has a number of new features that are worth checking out.  This page is an informal list of these features and projects.","sidebar":"tutorialSidebar"},"appendix/upgrading-from-chisel-3-4":{"id":"appendix/upgrading-from-chisel-3-4","title":"Upgrading From Chisel 3.4 to 3.5","description":"Upgrading From Chisel 3.4 to 3.5","sidebar":"tutorialSidebar"},"appendix/upgrading-from-scala-2-11":{"id":"appendix/upgrading-from-scala-2-11","title":"Upgrading From Scala 2.11","description":"Upgrading From Scala 2.11 to 2.12","sidebar":"tutorialSidebar"},"appendix/versioning":{"id":"appendix/versioning","title":"Versioning","description":"Chisel follows Semantic Versioning 2.0.0.","sidebar":"tutorialSidebar"},"cookbooks/cookbook":{"id":"cookbooks/cookbook","title":"General Cookbook","description":"Please note that these examples make use of Chisel\'s scala-style printing.","sidebar":"tutorialSidebar"},"cookbooks/cookbooks":{"id":"cookbooks/cookbooks","title":"Cookbooks","description":"Welcome to the Chisel Cookbooks, where we capture frequently-used design patterns or troubleshooting questions.","sidebar":"tutorialSidebar"},"cookbooks/dataview":{"id":"cookbooks/dataview","title":"DataView Cookbook","description":"* How do I view a Data as a UInt or vice versa?","sidebar":"tutorialSidebar"},"cookbooks/hierarchy":{"id":"cookbooks/hierarchy","title":"Hierarchy Cookbook","description":"* How do I instantiate multiple instances with the same module parameterization, but avoid re-elaboration?","sidebar":"tutorialSidebar"},"cookbooks/naming":{"id":"cookbooks/naming","title":"Naming Cookbook","description":"I still have _T signals, can this be fixed?","sidebar":"tutorialSidebar"},"cookbooks/serialization":{"id":"cookbooks/serialization","title":"Serialization Cookbook","description":"* Why do I need to serialize Modules","sidebar":"tutorialSidebar"},"cookbooks/troubleshooting":{"id":"cookbooks/troubleshooting","title":"Troubleshooting","description":"This page is a starting point for recording common and not so common problems in developing with Chisel3.  In particular, those situations where there is a work around that will keep you going.","sidebar":"tutorialSidebar"},"developers/developers":{"id":"developers/developers","title":"Developer Documentation","description":"Tips and tricks for Chisel developers:","sidebar":"tutorialSidebar"},"developers/sbt-subproject":{"id":"developers/sbt-subproject","title":"Developers","description":"In order to use the constructs defined in the Chisel3 library, those definitions must be made available to the Scala","sidebar":"tutorialSidebar"},"developers/scaladoc":{"id":"developers/scaladoc","title":"Scaladoc","description":"Scaladoc","sidebar":"tutorialSidebar"},"developers/style":{"id":"developers/style","title":"Style Guide","description":"This document describes the syle used within the chisel3","sidebar":"tutorialSidebar"},"developers/test-coverage":{"id":"developers/test-coverage","title":"Test Coverage","description":"Test Coverage Setup","sidebar":"tutorialSidebar"},"explanations/annotations":{"id":"explanations/annotations","title":"Annotations","description":"Annotations are metadata containers associated with zero or more \\"things\\" in a FIRRTL circuit.","sidebar":"tutorialSidebar"},"explanations/blackboxes":{"id":"explanations/blackboxes","title":"Blackboxes","description":"Chisel BlackBoxes are used to instantiate externally defined modules. This construct is useful","sidebar":"tutorialSidebar"},"explanations/bundles-and-vecs":{"id":"explanations/bundles-and-vecs","title":"Bundles and Vecs","description":"Bundle and Vec are classes that allow the user to expand the set of Chisel datatypes with aggregates of other types.","sidebar":"tutorialSidebar"},"explanations/chisel-enum":{"id":"explanations/chisel-enum","title":"Enumerations","description":"The ChiselEnum type can be used to reduce the chance of error when encoding mux selectors, opcodes, and functional unit operations.","sidebar":"tutorialSidebar"},"explanations/chisel-type-vs-scala-type":{"id":"explanations/chisel-type-vs-scala-type","title":"Chisel Type vs Scala Type","description":"The Scala compiler cannot distinguish between Chisel\'s representation of hardware such as false.B, Reg(Bool())","sidebar":"tutorialSidebar"},"explanations/combinational-circuits":{"id":"explanations/combinational-circuits","title":"Combinational Circuits","description":"A circuit is represented as a graph of nodes in Chisel.  Each node is","sidebar":"tutorialSidebar"},"explanations/connectable":{"id":"explanations/connectable","title":"Connectable Operators","description":"Table of Contents","sidebar":"tutorialSidebar"},"explanations/connection-operators":{"id":"explanations/connection-operators","title":"Deep Dive into <> and := Connection Operators","description":"Chisel contains two connection operators, := and `. This document provides a deeper explanation of the differences of the two and when to use one or the other. The differences are demonstrated with experiments using Scastie examples which use DecoupledIO`.","sidebar":"tutorialSidebar"},"explanations/data-types":{"id":"explanations/data-types","title":"Chisel Data Types","description":"Chisel datatypes are used to specify the type of values held in state","sidebar":"tutorialSidebar"},"explanations/dataview":{"id":"explanations/dataview","title":"DataView","description":"New in Chisel 3.5","sidebar":"tutorialSidebar"},"explanations/decoder":{"id":"explanations/decoder","title":"Decoders","description":"It is common in a complex design to recognize certain patterns from a big UInt coming from a data bus and dispatch","sidebar":"tutorialSidebar"},"explanations/explanations":{"id":"explanations/explanations","title":"Explanations","description":"Explanation documentation gives background and context.","sidebar":"tutorialSidebar"},"explanations/functional-abstraction":{"id":"explanations/functional-abstraction","title":"Functional Abstraction","description":"We can define functions to factor out a repeated piece of logic that","sidebar":"tutorialSidebar"},"explanations/functional-module-creation":{"id":"explanations/functional-module-creation","title":"Functional Module Creation","description":"Objects in Scala have a pre-existing creation function (method) called apply.","sidebar":"tutorialSidebar"},"explanations/interfaces-and-connections":{"id":"explanations/interfaces-and-connections","title":"Interfaces and Connections","description":"For more sophisticated modules it is often useful to define and instantiate interface classes while defining the IO for a module. First and foremost, interface classes promote reuse allowing users to capture once and for all common interfaces in a useful form.","sidebar":"tutorialSidebar"},"explanations/intrinsics":{"id":"explanations/intrinsics","title":"Intrinsics","description":"Chisel Intrinsics are used to instantiate implementation defined functionality.","sidebar":"tutorialSidebar"},"explanations/memories":{"id":"explanations/memories","title":"Memories","description":"Chisel provides facilities for creating both read only and read/write memories.","sidebar":"tutorialSidebar"},"explanations/modules":{"id":"explanations/modules","title":"Modules","description":"Chisel modules are very similar to Verilog modules in","sidebar":"tutorialSidebar"},"explanations/motivation":{"id":"explanations/motivation","title":"Motivation","description":"We were motivated to develop a new hardware language by years of","sidebar":"tutorialSidebar"},"explanations/multi-clock":{"id":"explanations/multi-clock","title":"Multiple Clock Domains","description":"Chisel 3 supports multiple clock domains as follows.","sidebar":"tutorialSidebar"},"explanations/muxes-and-input-selection":{"id":"explanations/muxes-and-input-selection","title":"Muxes and Input Selection","description":"Selecting inputs is very useful in hardware description, and therefore Chisel provides several built-in generic input-selection implementations.","sidebar":"tutorialSidebar"},"explanations/naming":{"id":"explanations/naming","title":"Naming","description":"Historically, Chisel has had trouble reliably capturing the names of signals. The reasons for this are due to (1)","sidebar":"tutorialSidebar"},"explanations/operators":{"id":"explanations/operators","title":"Operators","description":"Chisel defines a set of hardware operators:","sidebar":"tutorialSidebar"},"explanations/polymorphism-and-parameterization":{"id":"explanations/polymorphism-and-parameterization","title":"Polymorphism and Parameterization","description":"This section is advanced and can be skipped at first reading.","sidebar":"tutorialSidebar"},"explanations/ports":{"id":"explanations/ports","title":"Ports","description":"Ports are used as interfaces to hardware components.  A port is simply","sidebar":"tutorialSidebar"},"explanations/printing":{"id":"explanations/printing","title":"Printing","description":"Chisel provides the printf function for debugging purposes. It comes in two flavors:","sidebar":"tutorialSidebar"},"explanations/properties":{"id":"explanations/properties","title":"Properties","description":"Chisel properties represent information about the design that is not hardware.","sidebar":"tutorialSidebar"},"explanations/reset":{"id":"explanations/reset","title":"Reset","description":"As of Chisel 3.2.0, Chisel 3 supports both synchronous and asynchronous reset,","sidebar":"tutorialSidebar"},"explanations/sequential-circuits":{"id":"explanations/sequential-circuits","title":"Sequential Circuits","description":"The simplest form of state element supported by Chisel is a positive edge-triggered register, which can be instantiated as:","sidebar":"tutorialSidebar"},"explanations/source-locators":{"id":"explanations/source-locators","title":"Source Locators","description":"When elaborating a Chisel design and emitting a FIRRTL file or Verilog file, Chisel will automatically","sidebar":"tutorialSidebar"},"explanations/supported-hardware":{"id":"explanations/supported-hardware","title":"Supported Hardware","description":"While Chisel focuses on binary logic, Chisel can support analog and tri-state wires with the Analog type - see Datatypes in Chisel.","sidebar":"tutorialSidebar"},"explanations/unconnected-wires":{"id":"explanations/unconnected-wires","title":"Unconnected Wires","description":"The Invalidate API (#645) adds support to Chisel","sidebar":"tutorialSidebar"},"explanations/warnings":{"id":"explanations/warnings","title":"Warnings","description":"Warnings in Chisel are used for deprecating old APIs or semantics for later removal.","sidebar":"tutorialSidebar"},"explanations/width-inference":{"id":"explanations/width-inference","title":"Width Inference","description":"Chisel provides bit width inference to reduce design effort. Users are encouraged to manually specify widths of ports and registers to prevent any surprises, but otherwise unspecified widths will be inferred by the FIRRTL compiler.","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"An Introduction to Chisel","description":"Chisel (Constructing","sidebar":"tutorialSidebar"},"resources/faqs":{"id":"resources/faqs","title":"Frequently Asked Questions","description":"* Where should I start if I want to learn Chisel?","sidebar":"tutorialSidebar"},"resources/resources":{"id":"resources/resources","title":"Resources and References","description":"The best resource to learn about Chisel is the online Chisel Bootcamp. This runs in your browser and assumes no prior Scala knowledge. (You may also run this locally via the backing chisel-bootcamp GitHub repository.)","sidebar":"tutorialSidebar"}}}')}}]);
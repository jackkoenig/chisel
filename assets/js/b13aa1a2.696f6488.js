"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[2869],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),m=i,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1398:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const r={layout:"docs",title:"Muxes and Input Selection",section:"chisel3"},l="Muxes and Input Selection",o={unversionedId:"explanations/muxes-and-input-selection",id:"explanations/muxes-and-input-selection",title:"Muxes and Input Selection",description:"Selecting inputs is very useful in hardware description, and therefore Chisel provides several built-in generic input-selection implementations.",source:"@site/docs/explanations/muxes-and-input-selection.md",sourceDirName:"explanations",slug:"/explanations/muxes-and-input-selection",permalink:"/chisel/docs/explanations/muxes-and-input-selection",draft:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/explanations/muxes-and-input-selection.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Muxes and Input Selection",section:"chisel3"},sidebar:"tutorialSidebar",previous:{title:"Multiple Clock Domains",permalink:"/chisel/docs/explanations/multi-clock"},next:{title:"Naming",permalink:"/chisel/docs/explanations/naming"}},s={},u=[{value:"Mux",id:"mux",level:3},{value:"MuxCase",id:"muxcase",level:3},{value:"MuxLookup",id:"muxlookup",level:3},{value:"Mux1H",id:"mux1h",level:3}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"muxes-and-input-selection"},"Muxes and Input Selection"),(0,i.kt)("p",null,"Selecting inputs is very useful in hardware description, and therefore Chisel provides several built-in generic input-selection implementations."),(0,i.kt)("h3",{id:"mux"},"Mux"),(0,i.kt)("p",null,"The first one is ",(0,i.kt)("inlineCode",{parentName:"p"},"Mux"),". This is a 2-input selector. Unlike the ",(0,i.kt)("inlineCode",{parentName:"p"},"Mux2")," example which was presented previously, the built-in ",(0,i.kt)("inlineCode",{parentName:"p"},"Mux")," allows\nthe inputs (",(0,i.kt)("inlineCode",{parentName:"p"},"in0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"in1"),") to be any datatype as long as they are the same subclass of ",(0,i.kt)("inlineCode",{parentName:"p"},"Data"),"."),(0,i.kt)("p",null,"By using the functional module creation feature presented in the previous section, we can create multi-input selector in a simple way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"Mux(c1, a, Mux(c2, b, Mux(..., default)))\n")),(0,i.kt)("h3",{id:"muxcase"},"MuxCase"),(0,i.kt)("p",null,"The nested ",(0,i.kt)("inlineCode",{parentName:"p"},"Mux")," is not necessary since Chisel also provides the built-in ",(0,i.kt)("inlineCode",{parentName:"p"},"MuxCase"),", which implements that exact feature.\n",(0,i.kt)("inlineCode",{parentName:"p"},"MuxCase")," is an n-way ",(0,i.kt)("inlineCode",{parentName:"p"},"Mux"),", which can be used as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"MuxCase(default, Array(c1 -> a, c2 -> b, ...))\n")),(0,i.kt)("p",null,"Where each selection dependency is represented as a tuple in a Scala\narray ","[ condition -> selected_input_port ]","."),(0,i.kt)("h3",{id:"muxlookup"},"MuxLookup"),(0,i.kt)("p",null,"Chisel also provides ",(0,i.kt)("inlineCode",{parentName:"p"},"MuxLookup")," which is an n-way indexed multiplexer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"MuxLookup(idx, default)(Seq(0.U -> a, 1.U -> b, ...))\n")),(0,i.kt)("p",null,"This is the same as a ",(0,i.kt)("inlineCode",{parentName:"p"},"MuxCase"),", where the conditions are all index based selection:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"MuxCase(default,\n        Array((idx === 0.U) -> a,\n              (idx === 1.U) -> b, ...))\n")),(0,i.kt)("p",null,"Note that the conditions/cases/selectors (eg. c1, c2) must be in parentheses."),(0,i.kt)("h3",{id:"mux1h"},"Mux1H"),(0,i.kt)("p",null,"Another ",(0,i.kt)("inlineCode",{parentName:"p"},"Mux")," utility is the one-hot mux, ",(0,i.kt)("inlineCode",{parentName:"p"},"Mux1H"),". It takes a sequence of selectors and values and returns the value associated with the one selector that is set. If zero or multiple selectors are set the behavior is undefined.  For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"  val hotValue = chisel3.util.Mux1H(Seq(\n    io.selector(0) -> 2.U,\n    io.selector(1) -> 4.U,\n    io.selector(2) -> 8.U,\n    io.selector(4) -> 11.U,\n  ))\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Mux1H")," whenever possible generates ",(0,i.kt)("em",{parentName:"p"},"Firrtl")," that is readily optimizable as low depth and/or tree.  This optimization is not possible when the values are of type ",(0,i.kt)("inlineCode",{parentName:"p"},"FixedPoint")," or an aggregate type that contains ",(0,i.kt)("inlineCode",{parentName:"p"},"FixedPoint"),"s and results instead as a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"Mux")," tree.  This behavior could be sub-optimal.  As ",(0,i.kt)("inlineCode",{parentName:"p"},"FixedPoint")," is still ",(0,i.kt)("em",{parentName:"p"},"experimental")," this behavior may change in the future."))}d.isMDXComponent=!0}}]);
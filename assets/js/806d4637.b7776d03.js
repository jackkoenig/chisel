"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[2563],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>b});var r=t(7294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function n(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,i=function(e,a){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),d=function(e){var a=r.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):n(n({},a),e)),t},u=function(e){var a=d(e.components);return r.createElement(s.Provider,{value:a},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(t),m=i,b=c["".concat(s,".").concat(m)]||c[m]||p[m]||o;return t?r.createElement(b,n(n({ref:a},u),{},{components:t})):r.createElement(b,n({ref:a},u))}));function b(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var o=t.length,n=new Array(o);n[0]=m;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[c]="string"==typeof e?e:i,n[1]=l;for(var d=2;d<o;d++)n[d]=t[d];return r.createElement.apply(null,n)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4793:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>n,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const o={layout:"docs",title:"Serialization Cookbook",section:"chisel3"},n="Serialization Cookbook",l={unversionedId:"cookbooks/serialization",id:"cookbooks/serialization",title:"Serialization Cookbook",description:"* Why do I need to serialize Modules",source:"@site/docs/cookbooks/serialization.md",sourceDirName:"cookbooks",slug:"/cookbooks/serialization",permalink:"/chisel/docs/cookbooks/serialization",draft:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/cookbooks/serialization.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Serialization Cookbook",section:"chisel3"},sidebar:"tutorialSidebar",previous:{title:"Naming Cookbook",permalink:"/chisel/docs/cookbooks/naming"},next:{title:"Troubleshooting",permalink:"/chisel/docs/cookbooks/troubleshooting"}},s={},d=[{value:"Why do I need to serialize Modules",id:"why-do-i-need-to-serialize-modules",level:2},{value:"How do I serialize Modules with <code>SerializableModuleGenerator</code>",id:"how-do-i-serialize-modules-with-serializablemodulegenerator",level:2}],u={toc:d},c="wrapper";function p(e){let{components:a,...t}=e;return(0,i.kt)(c,(0,r.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"serialization-cookbook"},"Serialization Cookbook"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#why-do-i-need-to-serialize-modules"},"Why do I need to serialize Modules")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#how-do-i-seerialize-modules-with-serializablemodulegenerator"},"How do I serialize Modules with SerializableModuleGenerator"))),(0,i.kt)("h2",{id:"why-do-i-need-to-serialize-modules"},"Why do I need to serialize Modules"),(0,i.kt)("p",null,'Chisel provides a very flexible hardware design experience. However, it sometimes becomes too flexible to design a relative big designs, since parameters of module might come from: 1. Global variables; 2. Outer class; 3. Entropies(time, random). It becomes really hard or impossible to describe "how to reproduce this single module?". This forbids doing unit-test for a module generator, and introduces issues in post-synthesis when doing ECO: a change to Module A might lead to change in Module B.\nThus ',(0,i.kt)("inlineCode",{parentName:"p"},"SerializableModuleGenerator"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SerializableModule[T <: SerializableModuleParameter]")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"SerializableModuleParameter")," are provided to solve these issues.\nFor any ",(0,i.kt)("inlineCode",{parentName:"p"},"SerializableModuleGenerator"),", Chisel can automatically serialize and de-serialize it by adding these constraints:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"the ",(0,i.kt)("inlineCode",{parentName:"li"},"SerializableModule")," should not be inner class, since the outer class is a parameter to it;"),(0,i.kt)("li",{parentName:"ol"},"the ",(0,i.kt)("inlineCode",{parentName:"li"},"SerializableModule")," has and only has one parameter with ",(0,i.kt)("inlineCode",{parentName:"li"},"SerializableModuleParameter")," as its type."),(0,i.kt)("li",{parentName:"ol"},"the Module neither depends on global variables nor uses non-reproducible functions(random, time, etc), and this should be guaranteed by user, since Scala cannot detect it.")),(0,i.kt)("p",null,"It can provide these benefits:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"user can use ",(0,i.kt)("inlineCode",{parentName:"li"},"SerializableModuleGenerator(module: class[SerializableModule], parameter: SerializableModuleParameter)")," to auto serialize a Module and its parameter."),(0,i.kt)("li",{parentName:"ol"},"user can nest ",(0,i.kt)("inlineCode",{parentName:"li"},"SerializableModuleGenerator")," in other serializable parameters to represent a relative large parameter."),(0,i.kt)("li",{parentName:"ol"},"user can elaborate any ",(0,i.kt)("inlineCode",{parentName:"li"},"SerializableModuleGenerator")," into a single module for testing.")),(0,i.kt)("h2",{id:"how-do-i-serialize-modules-with-serializablemodulegenerator"},"How do I serialize Modules with ",(0,i.kt)("inlineCode",{parentName:"h2"},"SerializableModuleGenerator")),(0,i.kt)("p",null,"It is pretty simple and illustrated by example below, the ",(0,i.kt)("inlineCode",{parentName:"p"},"GCD")," Module with ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," as its parameter."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\nimport chisel3.experimental.{SerializableModule, SerializableModuleGenerator, SerializableModuleParameter}\nimport upickle.default._\n\n// provide serialization functions to GCDSerializableModuleParameter\nobject GCDSerializableModuleParameter {\n  implicit def rwP: ReadWriter[GCDSerializableModuleParameter] = macroRW\n}\n\n// Parameter\ncase class GCDSerializableModuleParameter(width: Int) extends SerializableModuleParameter\n\n// Module\nclass GCDSerializableModule(val parameter: GCDSerializableModuleParameter)\n    extends Module\n    with SerializableModule[GCDSerializableModuleParameter] {\n  val io = IO(new Bundle {\n    val a = Input(UInt(parameter.width.W))\n    val b = Input(UInt(parameter.width.W))\n    val e = Input(Bool())\n    val z = Output(UInt(parameter.width.W))\n  })\n  val x = Reg(UInt(parameter.width.W))\n  val y = Reg(UInt(parameter.width.W))\n  val z = Reg(UInt(parameter.width.W))\n  val e = Reg(Bool())\n  when(e) {\n    x := io.a\n    y := io.b\n    z := 0.U\n  }\n  when(x =/= y) {\n    when(x > y) {\n      x := x - y\n    }.otherwise {\n      y := y - x\n    }\n  }.otherwise {\n    z := x\n  }\n  io.z := z\n}\n")),(0,i.kt)("p",null,"using ",(0,i.kt)("inlineCode",{parentName:"p"},"write")," function in ",(0,i.kt)("inlineCode",{parentName:"p"},"upickle"),", it should return a json string:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val j = upickle.default.write(\n  SerializableModuleGenerator(\n    classOf[GCDSerializableModule],\n    GCDSerializableModuleParameter(32)\n  )\n)\n// j: String = "{\\"parameter\\":{\\"width\\":32},\\"generator\\":\\"repl.MdocSession$MdocApp$GCDSerializableModule\\"}"\n')),(0,i.kt)("p",null,"You can then read from json string and elaborate the Module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"circt.stage.ChiselStage.emitSystemVerilog(\n  upickle.default.read[SerializableModuleGenerator[GCDSerializableModule, GCDSerializableModuleParameter]](\n    ujson.read(j)\n  ).module()\n)\n")))}p.isMDXComponent=!0}}]);
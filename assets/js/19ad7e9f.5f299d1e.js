"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[4941],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,s=e.originalType,i=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(a),m=l,h=p["".concat(i,".").concat(m)]||p[m]||u[m]||s;return a?n.createElement(h,r(r({ref:t},d),{},{components:a})):n.createElement(h,r({ref:t},d))}));function h(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var s=a.length,r=new Array(s);r[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[p]="string"==typeof e?e:l,r[1]=o;for(var c=2;c<s;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8119:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var n=a(7462),l=(a(7294),a(3905));const s={layout:"docs",title:"Style Guide",section:"chisel3"},r="Chisel Developers Style Guide",o={unversionedId:"developers/style",id:"developers/style",title:"Style Guide",description:"This document describes the syle used within the chisel3",source:"@site/docs/developers/style.md",sourceDirName:"developers",slug:"/developers/style",permalink:"/chisel/docs/developers/style",draft:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/developers/style.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Style Guide",section:"chisel3"},sidebar:"tutorialSidebar",previous:{title:"Scaladoc",permalink:"/chisel/docs/developers/scaladoc"},next:{title:"Test Coverage",permalink:"/chisel/docs/developers/test-coverage"}},i={},c=[{value:"Filenames",id:"filenames",level:2},{value:"Packages",id:"packages",level:2},{value:"Imports",id:"imports",level:2},{value:"Tests",id:"tests",level:2},{value:"Comments",id:"comments",level:2},{value:"Module Classes and Instances",id:"module-classes-and-instances",level:2},{value:"Naming Conventions",id:"naming-conventions",level:2},{value:"Why CamelCase instead of Snake_Case?",id:"why-camelcase-instead-of-snake_case",level:3},{value:"Modules and Bundles (Classes, Traits, and Objects)",id:"modules-and-bundles-classes-traits-and-objects",level:3},{value:"Values and Methods",id:"values-and-methods",level:3},{value:"Constants",id:"constants",level:3},{value:"UpperCamelCase vs. lowerCamelCase",id:"uppercamelcase-vs-lowercamelcase",level:3}],d={toc:c},p="wrapper";function u(e){let{components:t,...a}=e;return(0,l.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"chisel-developers-style-guide"},"Chisel Developers Style Guide"),(0,l.kt)("p",null,"This document describes the syle used within the ",(0,l.kt)("inlineCode",{parentName:"p"},"chisel3"),"\nand related projects (",(0,l.kt)("inlineCode",{parentName:"p"},"firrtl"),", etc). It does not\ncapture requirements for code which is written using these libraries,\nalthough projects may choose to adopt these guidelines."),(0,l.kt)("p",null,"The Chisel style guide reflects the ",(0,l.kt)("a",{parentName:"p",href:"http://google.github.io/styleguide/javaguide.html"},"Google Java style\nguide")," and the ",(0,l.kt)("a",{parentName:"p",href:"http://docs.scala-lang.org/style/"},"General Public Scala style\nguide"),". The specific rules below are to clarify\nthe style used for the chisel3 repo and repos related to Chisel (Firrtl)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Goal:")," Readability and consistency are the main purposes of the style guide.\nWriting your code so someone else (or yourself) can grok it later is important\nto code health and quality."),(0,l.kt)("h2",{id:"filenames"},"Filenames"),(0,l.kt)("p",null,'The source file name consists of the case-sensitive name of the top-level class\nit contains, plus ".scala".'),(0,l.kt)("h2",{id:"packages"},"Packages"),(0,l.kt)("p",null,"Package definitions must contain the full path to the package from scala. If\nyou create a subpackage, it should go in a subdirectory."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"package directory.name.to.get.you.to.your.source\n")),(0,l.kt)("p",null,"As in Scala, packages follow the ",(0,l.kt)("a",{parentName:"p",href:"https://google.github.io/styleguide/javaguide.html#s5.2.1-package-names"},"Java package naming convention"),".\nNote that these guidelines call for all lowercase, no underscores."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// Do this\npackage hardware.chips.topsecret.masterplan\n\n// Not this\npackage hardware.chips.veryObvious.bad_style\n")),(0,l.kt)("p",null,"We also suggest you do not use chisel3 as a package, and especially do not use it\nas the final (innermost) package."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// Don't do this\npackage hardware.chips.newchip.superfastcomponent.chisel3\n\n// This will lead to instantiating package members like so:\nval module = Module(new chisel3.FastModule)\n\n// Which collides with the chisel namespace\nimport chisel3._\n")),(0,l.kt)("h2",{id:"imports"},"Imports"),(0,l.kt)("p",null,"Avoid wildcard ( .",(0,l.kt)("em",{parentName:"p"}," ) imports, with the exception of chisel3."),"\nAll other imports must call out used methods.\n",(0,l.kt)("inlineCode",{parentName:"p"},"import chisel3._")," must be first, and separated from remaining imports with an extra blank line."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Reason:")," This makes it clear where methods are defined."),(0,l.kt)("p",null,"Any remaining imports must be listed alphabetically."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"import chisel3._\n\nimport the.other.thing.that.i.reference.inline\nimport the.other.things.that.i.reference.{ClassOne, ClassTwo}\n\n\nval myInline = inline.MakeAnInline()\nval myClassOne = new ClassOne\n")),(0,l.kt)("h2",{id:"tests"},"Tests"),(0,l.kt)("p",null,'Test classes are named starting with the name of the class they are testing, and\nending with "Test".\nTest files must start with the name of the class you are testing and end with\n"Test.scala".\nTest files should reside in a subdirectory called "tests".\nThe tests package should be composed of the package class you are testing.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"package class.under.test.class\npackage tests\n")),(0,l.kt)("h2",{id:"comments"},"Comments"),(0,l.kt)("p",null,"We use scaladoc to automatically generate documentation from the source code."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"/** Multiple lines of ScalaDoc text are written here,\n  * wrapped normally...\n  */\npublic int method(String p1) { ... }\n")),(0,l.kt)("p",null,"... or in this single-line example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"/** An especially short bit of Javadoc. */\n")),(0,l.kt)("p",null,"Write documentation as if the person reading it knows more about Scala and\nChisel than you. If you find comments in the code consider breaking them up\ninto seperate methods."),(0,l.kt)("h2",{id:"module-classes-and-instances"},"Module Classes and Instances"),(0,l.kt)("p",null,"Modules can take different forms in Chisel. The first form is similar to Verilog, where\nyou instance the module and then hook it up. In this case ",(0,l.kt)("inlineCode",{parentName:"p"},"Module(new MyMod())")," is\nreturning a reference to the module."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val myMod = Module(new MyMod())\nmyMod.io <> hookUp\n")),(0,l.kt)("p",null,"The second form is a more programmatic inline style with factory methods. In this case,\nQueue is actually returning the part of the IO bundle representing the queue's\noutput. The factory method takes the input IO to the queue and an optional parameter\nfor depth."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val queueOut = Queue(queueIn, depth=10)\n")),(0,l.kt)("p",null,"The latter can be used for composing multiple functions into a single line."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val queueOut = Queue(\n  Arbitrate.byRoundRobin(\n    Queue(a), // depth assumed to be 1\n    Queue(b, depth=3),\n    Queue(c, depth=4)\n  ),\n  depth=10\n)\n")),(0,l.kt)("h2",{id:"naming-conventions"},"Naming Conventions"),(0,l.kt)("p",null,"Chisel follows the ",(0,l.kt)("a",{parentName:"p",href:"http://docs.scala-lang.org/style/naming-conventions.html"},"Scala Naming Conventions"),".\nIn general, Chisel code should use ",(0,l.kt)("inlineCode",{parentName:"p"},"lowerCamelCase")," for variable naming (ie. the first letter\nof each word is capitalized except for the first word) and ",(0,l.kt)("inlineCode",{parentName:"p"},"UpperCamelCase")," for class names."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Using these guidelines can result in verilog which is noncompliant with common verilog coding standards, e.g.\nthe ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/lowRISC/style-guides/blob/master/VerilogCodingStyle.md#naming"},"lowRISC verilog coding style"),".\nAuthors of Chisel code that translates to hardware constructs might therefore prefer to use ",(0,l.kt)("inlineCode",{parentName:"p"},"snake_case"),". However,\ngenerated code can always be transformed to meet various emitted code requirements, so the official Chisel style\nguide follows the Scala convention.")),(0,l.kt)("h3",{id:"why-camelcase-instead-of-snake_case"},"Why CamelCase instead of Snake","_","Case?"),(0,l.kt)("p",null,"The compiler inserts underscores when splitting Chisel/FIRRTL aggregate types\ninto Verilog types. The compiler uses underscores to preserve the original\nstructure of the data in the resulting Verilog. Because of the special meaning\nof underscores in Chisel-generated Verilog, their use in naming is ",(0,l.kt)("strong",{parentName:"p"},"strongly"),"\ndiscouraged."),(0,l.kt)("p",null,"Consider the following Chisel code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val msg = Wire(new Bundle {\n  val valid = Bool()\n  val addr = UInt(32)\n  val data = UInt(64)\n})\nval msg_rec = Wire(Bool())\n")),(0,l.kt)("p",null,"Which compiles to the Verilog:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-verilog"},"wire  msg_valid;\nwire [31:0] msg_addr;\nwire [63:0] msg_data;\nwire  msg_rec;\n")),(0,l.kt)("p",null,"The Verilog maintains the structure of the original aggregate wire ",(0,l.kt)("inlineCode",{parentName:"p"},"msg"),".\nHowever, because we named another variable ",(0,l.kt)("inlineCode",{parentName:"p"},"msg_rec"),", it appears in the Verilog\nas if ",(0,l.kt)("inlineCode",{parentName:"p"},"msg")," had 4 fields instead of its actual 3! If we instead follow the\nlowerCamelCase for values naming convention, the resulting Verilog makes more\nsense:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val msg = Wire(new Bundle {\n  val valid = Bool()\n  val addr = UInt(32)\n  val data = UInt(64)\n})\nval msgRec = Wire(Bool())\n")),(0,l.kt)("p",null,"And its resulting Verilog:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-verilog"},"wire  msg_valid;\nwire [31:0] msg_addr;\nwire [63:0] msg_data;\nwire  msgRec;\n")),(0,l.kt)("p",null,"Much better."),(0,l.kt)("h3",{id:"modules-and-bundles-classes-traits-and-objects"},"Modules and Bundles (Classes, Traits, and Objects)"),(0,l.kt)("p",null,"Modules are Scala classes and thus use UpperCamelCase."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"class ModuleNamingExample extends Module {\n  ...\n}\n")),(0,l.kt)("p",null,"Similarly, other classes (Chisel & Scala) should be UpperCamelCase as well."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"trait UsefulScalaUtilities {\n  def isEven(n: Int): Boolean = (n % 2) == 0\n  def isOdd(n: Int): Boolean = !isEven(n)\n}\n\nclass MyCustomBundle extends Bundle {\n  ...\n}\n// Companion object to MyCustomBundle\nobject MyCustomBundle {\n  ...\n}\n\n")),(0,l.kt)("h3",{id:"values-and-methods"},"Values and Methods"),(0,l.kt)("p",null,"Values and methods should use lowerCamelCase. (Unless the value is a constant.)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val mySuperReg = Reg(init = 0.asUInt(32))\ndef myImportantMethod(a: UInt): Bool = a < 23.asUInt\n")),(0,l.kt)("h3",{id:"constants"},"Constants"),(0,l.kt)("p",null,"Unlike the Google Java style, constants use UpperCamelCase, which is in line\nwith the official ",(0,l.kt)("a",{parentName:"p",href:"https://docs.scala-lang.org/style/naming-conventions.html"},"Scala Naming\nConventions"),".\nConstants are final fields (val or object) whose contents are deeply immutable\nand belong to a package object or an object. Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'// Constants\nobject Constants {\n  val Number = 5\n  val Names = "Ed" :: "Ann" :: Nil\n  val Ages = Map("Ed" -> 35, "Ann" -> 32)\n}\n\n// Not constants\nclass NonConstantsInClass {\n  val inClass: String = "in-class"\n}\n\nobject nonConstantsInObject {\n  var varString = "var-string"\n  val mutableCollection: scala.collection.mutable.Set[String]\n  val mutableElements = Set(mutable)\n}\n')),(0,l.kt)("h3",{id:"uppercamelcase-vs-lowercamelcase"},"UpperCamelCase vs. lowerCamelCase"),(0,l.kt)("p",null,"There is more than one reasonable way to covert English prose into camel case.\nWe follow the convention defined in the ",(0,l.kt)("a",{parentName:"p",href:"https://google.github.io/styleguide/javaguide.html#s5.3-camel-case"},"Google Java style\nguide"),". The\npotentially non-obvious rule being to treat acronymns as words for the purpose\nof camel case."),(0,l.kt)("p",null,"Note that the casing of the original words is almost entirely disregarded.\nExample:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Prose form"),(0,l.kt)("th",{parentName:"tr",align:"left"},"UpperCamelCase"),(0,l.kt)("th",{parentName:"tr",align:"left"},"lowerCamelCase"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Incorrect"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"find GCD"),(0,l.kt)("td",{parentName:"tr",align:"left"},"FindGcd"),(0,l.kt)("td",{parentName:"tr",align:"left"},"findGcd"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("del",{parentName:"td"},"findGCD"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"state for FSM"),(0,l.kt)("td",{parentName:"tr",align:"left"},"StateForFsm"),(0,l.kt)("td",{parentName:"tr",align:"left"},"stateForFsm"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("del",{parentName:"td"},"stateForFSM"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"mock dut"),(0,l.kt)("td",{parentName:"tr",align:"left"},"MockDut"),(0,l.kt)("td",{parentName:"tr",align:"left"},"mockDut"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("del",{parentName:"td"},"MockDUT"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"FIFO Generator"),(0,l.kt)("td",{parentName:"tr",align:"left"},"FifoGenerator"),(0,l.kt)("td",{parentName:"tr",align:"left"},"fifoGenerator"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("del",{parentName:"td"},"FIFOGenerator"))))))}u.isMDXComponent=!0}}]);